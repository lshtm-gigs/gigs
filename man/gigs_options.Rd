% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gigs_options.R
\name{gigs_options}
\alias{gigs_options}
\alias{gigs_option_get}
\alias{gigs_option_set}
\alias{gigs_input_options_set}
\title{Get and set gigs package-level options}
\usage{
gigs_option_get(option, silent = FALSE)

gigs_option_set(option, new_value, silent = FALSE)

gigs_input_options_set(new_value, silent = FALSE)
}
\arguments{
\item{option}{A single case-sensitive character variable, one of:
\itemize{
\item \code{"handle_missing_data"} - How should gigs handle missing (\code{NA}) elements?
\item \code{"handle_undefined_data"} - How should gigs handle undefined (\code{NaN},
\code{Inf}, \code{-Inf}) elements?
\item \code{"handle_oob_xvar"} - How should gigs handle elements of \code{x} variables
which are out of bounds for the standard in use?
\item \code{"handle_invalid_sex"} - How should gigs handle elements of \code{sex} which
are not one of \code{"M"} or \code{"F"}?
\item \code{"handle_oob_centiles"} - In \code{centile2value} functions, how should
gigs handle elements of \code{p} that are not between \code{0} and \code{1}?
\item \code{"handle_unused_levels"} - When generating growth categories as factors,
should gigs drop or keep unused factor levels, and should it issue
warnings when unused factor levels occur?
}}

\item{silent}{A single logical value controlling whether a message will be
printed to the console describing either:
\itemize{
\item The current value of \code{option} in \code{gigs_option_get()}.
\item The \code{new_value} of \code{option} in \code{gigs_option_set()}.
}

This argument will not accept an integer in place of a logical value.}

\item{new_value}{A single case-sensitive character variable. For all options
\strong{except} "handle_unused_levels", this should be one of:
\itemize{
\item \code{"quiet"} - gigs will replace invalid vector elements with \code{NA} quietly.
\item \code{"warn"} -  gigs will replace invalid vector elements with \code{NA} loudly.
\item \code{"error"} - gigs will throw informative errors if any invalid inputs are
encountered.
For "handle_unused_levels", \code{new_value} should be one of:
\item \code{"keep_quiet"} - Keep unused factor levels, and don't issue a warning.
\item \code{"keep_warn"} - Keep unused factor levels, whilst issuing a warning.
\item \code{"drop_quiet"} - Drop unused factor levels, and don't issue a warning.
\item \code{"drop_warn"} - Drop unused factor levels, whilst issuing a warning.
}

By default, GIGS options are \code{"warn"} for input handling and \code{"keep_warn"}
for \code{"handle_unused_levels"}}
}
\value{
A single-length character vector. For \code{gigs_option_get()}, the
current value of \code{option}; for \code{gigs_option_get()}, the new value of
\code{option}; for \code{gigs_input_options_set()}, \code{new_value}. If \code{silent = FALSE}
(default), then informative messages will be printed to the console
regarding the current/new values of \code{option}.
}
\description{
By default, gigs will handle invalid input data, e.g. missing
(\code{NA}) or undefined (\code{NaN}, \code{Inf} and \code{-Inf}) values, by warning you of
their presence and replacing the invalid values with \code{NA}. It will also
warn you about unused factor levels when running growth outcome analyses.

You can change this input-checking behaviour with \code{gigs_option_set()} so
that gigs does this silently, or make gigs throw errors when confronted
with bad data. You can also make gigs drop unused factor levels in its
outputs, or silence its warnings about unused factor levels. You can also
change all options for gigs input-checking at once using
\code{gigs_input_options_set()}.
}
\examples{
# Show the names of all available options
names(.gigs_options)

# Retrieve the value of a gigs option (if `silent = FALSE`, would print a
# message)
option_value <- gigs_option_get("handle_missing_data", silent = TRUE)
print(option_value)

# Set the value of an option
gigs_option_set("handle_undefined_data", "error", silent = TRUE)

# Check that change has occurred
option_value <- gigs_option_get("handle_undefined_data", silent = TRUE)
print(option_value)

# Suppress printed output with `silent = TRUE`
gigs_option_set("handle_undefined_data", "quiet", silent = TRUE)

# Set all GIGS options for input checking
gigs_input_options_set("warn", silent = TRUE)
}
