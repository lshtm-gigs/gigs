[{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to gigs","title":"Contributing to gigs","text":"file outlines propose change gigs. based tidyverse contributing guidelines.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":"planned-development","dir":"","previous_headings":"","what":"Planned development","title":"Contributing to gigs","text":"package currently stable state development, degree active subsequent development envisioned primary authors. plan add: Additional growth standards requested package users deemed within package scope","code":""},{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":"scope","dir":"","previous_headings":"Planned development","what":"Scope","title":"Contributing to gigs","text":"package’s scope limited international growth standards. consequence, feature requests pull requests add support growth references (e.g. CDC growth charts UK-growth charts) rejected. want use growth references work, may find packages useful. childsds package can work many references wish use instead.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to gigs","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to gigs","text":"want make bigger change, ’s good idea first file issue see maintainer agrees necessary. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). can check tidyverse guide create great issue advice.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to gigs","text":"Fork package clone onto computer. haven’t done , can use usethis::create_from_github(\"lshtm-gigs/gigs\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described tidyverse style guide.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to gigs","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle existing code altered part PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to gigs","text":"Please note gigs project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":"gigs - Assess Fetal, Newborn, and Child Growth with International        Standards Copyright (C) 2024 gigs authors  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>."},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"rationale","dir":"Articles","previous_headings":"","what":"Rationale","title":"Benchmarking gigs against other software packages","text":"short article describes performance gigs relative non-exhaustive group R non-R packages implement international growth standards also found gigs. Thus far, comprehensive benchmark comparing different packages. short article compare speed package 1 100000 inputs, checking fast package can convert weight values z-scores different growth standards. performed benchmarks R version 4.4.1, using Windows 10 system Ryzen 7 3700X processor 16GB DDR4 RAM. Stata benchmarks run Stata 18.0 (revision 15 May 2023) system, using benchmark package Stata. R packages can used analyse growth data international standards, limitations present gigs. also software packages external R implement standards. table describes packages, extent implemented functions let users convert anthropometric measurements z-scores/centiles set standards implemented gigs - Child Growth standards, INTERGROWTH-21st Newborn Size standards (including Preterm), INTERGROWTH-21st Postnatal Growth standards preterm infants. tick (✅) indicates package contains functions growth standards within set, cross (❌) indicates package functions set growth standards, warning sign (⚠️) indicates standards set implemented, others.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"shared-benchmark-code","dir":"Articles","previous_headings":"","what":"Shared benchmark code","title":"Benchmarking gigs against other software packages","text":"vignette, perform benchmark performance growth standard set growth standards implemented gigs. : child growth standards (0-5 years) INTERGROWTH-21st Newborn Size standards INTERGROWTH-21st Postnatal Growth standards INTERGROWTH-21st Fetal standards benchmarks utilise pre-generated datasets growth standard. z-scores, x variable sexes row generated (pseudo)randomly. gigs test suite validates functions published growth curve data INTERGROWTH-21st Project, use gigs generate expected measurements observation. dataset can used compare speeds package. datasets generated following function: ’re using bench package throughout vignette, specifically bench::press() function, lets us compare function scaling iterating increasing amounts observations.","code":"library(gigs) benchmark_dataset <- function(n, family, acronym) {   data <- get(family, envir = asNamespace(\"gigs\"))   if (family == \"ig_fet\") {     xvars <- data[[acronym]][[1]][[1]]   } else {     xvars <- data[[acronym]][[1]][[1]][[1]]   }    withr::with_seed(seed = 154237890, code = {       # Random z-scores around 0       z <- rnorm(n = n)     })   withr::with_seed(seed = 154237890, code = {       # X variables are non-discrete but within bounds of the desired acronym       x <-  sample(xvars, size = n, replace = TRUE)       x_jitter <- c(runif(n = 5, min = -1, max = 1), 0)       x <- x + sample(x_jitter, size = n, replace = TRUE)       x <- pmax(pmin(x, max(xvars)), min(xvars))       # Sexes randomly sampled from male and female       sex <- sample(c(\"M\", \"F\"), size = n, replace = TRUE)     }   )   gigs_fn <- get(\"zscore2value\", envir = asNamespace(\"gigs\"))   out <- if (family != \"ig_fet\") {     list(z = z, x = x, sex = sex, family = family, acronym = acronym)   } else {     list(z = z, x = x, family = family, acronym = acronym)   }   out$y <- do.call(what = gigs_fn, args = out)   if (family == \"ig_fet\") {     out$sex <- NA   }   as.data.frame(out, stringsAsFactors = FALSE) }"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"who-growth-standards","dir":"Articles","previous_headings":"","what":"WHO Growth Standards","title":"Benchmarking gigs against other software packages","text":"World Health Organisation () Child Growth Standards included gigs various who_gs_*conversion functions. standards implemented variety packages.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"set-up-benchmark-dataset","dir":"Articles","previous_headings":"WHO Growth Standards","what":"Set up benchmark dataset","title":"Benchmarking gigs against other software packages","text":"first 10 rows dataset look like :","code":"# Generate 100,000-row dataset ac_who_gs <- \"wfa\" ds_who_gs <- benchmark_dataset(n = 100000,                                family = \"who_gs\",                                acronym = ac_who_gs) ##              z         x sex family acronym         y ## 1   0.17839158  542.3057   M who_gs     wfa 11.119034 ## 2   1.08068286  436.8223   F who_gs     wfa 10.829792 ## 3  -0.70269294 1070.1117   F who_gs     wfa 12.524220 ## 4   0.09501730    6.0000   M who_gs     wfa  3.502423 ## 5  -0.44829268 1465.8223   F who_gs     wfa 15.135840 ## 6  -0.35747447 1527.0000   M who_gs     wfa 15.958518 ## 7   1.16612927  431.3057   M who_gs     wfa 11.512052 ## 8  -0.08746512  653.3057   F who_gs     wfa 10.832094 ## 9  -0.47685189  948.1117   M who_gs     wfa 12.765554 ## 10  0.80015420  581.3677   M who_gs     wfa 12.206283"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"r","dir":"Articles","previous_headings":"WHO Growth Standards > Timing","what":"R","title":"Benchmarking gigs against other software packages","text":"","code":"temp_bp_who_gs_most <- bench::press(   input_len = c(1, 1000, 10000, seq(25000, 100000, 25000)),   {     selector <- seq_len(input_len)     weight_kg <- ds_who_gs$y[selector]     age_days <- ds_who_gs$x[selector]     acronym <- ds_who_gs$acronym[selector]     sex <- ds_who_gs$sex[selector]     sex_gs <- ifelse(sex == \"M\", \"Male\", \"Female\")     age_years <- age_days / 365.25     bm_who_gs <- bench::mark(       check = FALSE, filter_gc = TRUE, time_unit = \"ms\", min_iterations = 30,       gigs = gigs::value2zscore(weight_kg, age_days, sex,                                 family = \"who_gs\", acronym = ac_who_gs),       anthro = anthro::anthro_zscores(weight = weight_kg,                                       age = age_days,                                       sex = sex)$zwei,       AGD = AGD::y2z(y = weight_kg,                      x = age_days,                      sex = sex,                      ref = AGD::who.wgt,                      tail.adjust = TRUE),       childsds = childsds::sds(value = weight_kg,                               age = age_years,                               sex = sex,                               male = \"M\",                               female = \"F\",                               item = \"weight\",                               ref = childsds::who.ref),       gs = growthstandards::who_value2zscore(y = weight_kg, x = age_days,                                              y_var = \"wtkg\", x_var = \"agedays\",                                              sex = sex_gs),       sitar = sitar::LMS2z(y = weight_kg, x = age_years, sex = sex,                           measure = \"wt\", ref = sitar::who06)     )   })  temp_bp_who_gs_zscorer <- bench::press(   input_len = c(1, 1000, 5000, 10000, 15000),   {     selector <- seq_len(input_len)     weight_kg <- ds_who_gs$y[selector]     age_days <- ds_who_gs$x[selector]     sex <- ds_who_gs$sex[selector]     df_zscorer <- data.frame(       weight = weight_kg, age = age_days,       sex = ifelse(sex == \"M\", 1, 2)     )     bm_who_gs <- bench::mark(       check = FALSE, filter_gc = TRUE, time_unit = \"ms\", max_iterations = 5,       zscorer = zscorer::addWGSR(         df_zscorer, sex = \"sex\", firstPart = \"weight\", secondPart = \"age\",         index = \"wfa\"       )     )   })  bp_who_gs <- dplyr::bind_rows(temp_bp_who_gs_most, temp_bp_who_gs_zscorer) |>   dplyr::mutate(desc = attr(expression, which = \"description\")) |>   dplyr::select(!expression, !result, !memory, !time, !gc)"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"stata","dir":"Articles","previous_headings":"WHO Growth Standards > Timing","what":"Stata","title":"Benchmarking gigs against other software packages","text":"Stata, commands run inside -file utilises benchmark package Stata. code essentially bench::press(), packages ’re testing Stata.","code":"# Save .dta file equivalent of benchmarking table. This can be used to benchmark # Stata packages. haven::write_dta(   data = ds_who_gs,   path = file.path(\"exclude\", \"statabench\", \"bench_ds_who_gs.dta\") ) // This is Stata code foreach i in 1 10 100 500 1000 5000 10000 25000 50000 75000 100000 {     use \"benchmarking/bench_ds_who_gs.dta\", clear     qui drop if _n > `i'     di \"Number of inputs: `i'\"     bench, reps(25) restore last: ///         qui egen double z_gigs = who_gs(y, \"wfa\", \"v2z\"), ///             xvar(x) sex(sex) sexcode(m=M, f=F) }  foreach i in 1 10 100 500 1000 5000 10000 25000 50000 75000 100000 {     use \"benchmarking/bench_ds_who_gs.dta\", clear     qui drop if _n > `i'     di \"Number of inputs: `i'\"     bench, reps(25) restore last: ///         qui egen z_anthro = zanthro(y, wa, WHO), xvar(x) gender(sex) ///             gencode(male=M, female=F) ageunit(day) }"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"package-comparisons-timing","dir":"Articles","previous_headings":"WHO Growth Standards","what":"Package comparisons: timing","title":"Benchmarking gigs against other software packages","text":"whole, zscorer far slowest R package, taking around 13.705 seconds process 15,000 inputs. couldn’t get process 100,000 inputs good time. Looking source code, zscorer::addWGSR() hasn’t vectorised. Next slowest anthro, takes 2.211 seconds process 100,000 inputs. slowdown arises anthro computing results every Child Growth standard time anthro::anthro_zscores() called, also due slower implementation LMS procedure R packages. Next slowest Stata package zanthro, takes around 2.046 seconds compute results single standard. 4 times faster zanthro gigs Stata, scales efficiently zanthro takes around 0.405 seconds convert 100,000 measurements z-scores. Focussing faster R implementations reveals interesting patterns:  sitar package far away fastest , taking ~46 ms process 100,000 inputs. uses monthly LMS coefficients calculate z-scores. Whilst quicker, induce imprecision compared packages. Next fastest growthstandards package ~88 ms 100,000 inputs, followed gigs (~100 ms), childsds (~125 ms), lastly AGD (~119 ms). Interestingly, AGD starts much slower ‘fast’ packages, may scale efficiently.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"package-comparisons-numerical-consistency","dir":"Articles","previous_headings":"WHO Growth Standards","what":"Package comparisons: numerical consistency","title":"Benchmarking gigs against other software packages","text":"testing standards, found tested packages mostly agreed provided inputs, except childsds sitar. childsds, Child Growth standards constrain z-scores outer tails (.e. past 3 z-scores), data sparse extreme values. information constraining procedure can found reports referenced gigs::who_gs documentation. appears childsds perform constraining procedure, conversions abs(z_score) > 3 computed incorrectly: look z-scores, can see growthstandards gigs correctly apply constraining procedure; childsds . AGD package constrains z-scores tail.adjust option AGD::y2z() specified, looking anthro source code, also apply constraining procedure. Discrepancies sitar gigs arise sitar relying monthly LMS values Growth Standards, instead daily tables. means day, sitar gigs use slightly different lambda/mu/sigma values, compute different z-scores measurements.","code":"discrepancies <- data.frame(z = c(-3.03, -2.97, 2.97, 3.03),                             age_days = 0,                             sex = \"M\") |>   dplyr::mutate(     weight_kg = gigs::zscore2value(z, age_days, sex, \"who_gs\", \"wfa\"),     # GIGS z-score     z_gigs = gigs::value2zscore(weight_kg, age_days, sex, \"who_gs\", \"wfa\"),     # growthstandards z-score     z_growthstandards = growthstandards::who_wtkg2zscore(       age_days, weight_kg, \"Male\"     ),     # childsds z-score     z_childsds = childsds::sds(       value = weight_kg, age = age_days / 365.25,       sex = sex, male = \"M\", female = \"F\",       item = \"weight\", ref = childsds::who.ref     )   )"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"intergrowth-21st-newborn-size-standards","dir":"Articles","previous_headings":"","what":"INTERGROWTH-21st Newborn Size standards","title":"Benchmarking gigs against other software packages","text":"INTERGROWTH-21st Newborn Size standards implemented gigs R Stata, growthstandards package R. Let’s make new dataset, ds_ig_nbs, use benchmark functions: first 10 rows dataset look like :","code":"ac_ig_nbs <- \"wfga\" ds_ig_nbs <- benchmark_dataset(n = 100000,                                family = \"ig_nbs\",                                acronym = ac_ig_nbs) ds_ig_nbs[1:10, ] ##              z        x sex family acronym         y ## 1   0.17839158 199.6505   M ig_nbs    wfga 1.1849768 ## 2   1.08068286 213.1492   M ig_nbs    wfga 1.7851534 ## 3  -0.70269294 174.0968   F ig_nbs    wfga 0.5907529 ## 4   0.09501730 236.1492   F ig_nbs    wfga 2.0900137 ## 5  -0.44829268 232.1492   M ig_nbs    wfga 1.8175155 ## 6  -0.35747447 216.7849   M ig_nbs    wfga 1.4387923 ## 7   1.16612927 231.6505   F ig_nbs    wfga 2.3235513 ## 8  -0.08746512 188.6505   M ig_nbs    wfga 0.9236040 ## 9  -0.47685189 188.7849   F ig_nbs    wfga 0.8110397 ## 10  0.80015420 276.7849   F ig_nbs    wfga 3.5293549"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"r-1","dir":"Articles","previous_headings":"INTERGROWTH-21st Newborn Size standards > Timing","what":"R","title":"Benchmarking gigs against other software packages","text":"","code":"bp_ig_nbs <- bench::press(   input_len = c(1, 1000, 10000, seq(25000, 100000, 25000)),   {     p <- pnorm(ds_ig_nbs$z[1:input_len])     weight_kg <- ds_ig_nbs$y[1:input_len]     gest_days <- ds_ig_nbs$x[1:input_len]     acronym <- ds_ig_nbs$acronym[1:input_len]     sex <- ds_ig_nbs$sex[1:input_len]     sex_gs <- ifelse(sex == \"M\", \"Male\", \"Female\")     bench::mark(       check = FALSE, filter_gc = TRUE, time_unit = \"ms\", min_iterations = 50,       gigs = gigs::value2centile(y =weight_kg, x = gest_days, sex = sex,                                  family = \"ig_nbs\", acronym = ac_ig_nbs),       gs = growthstandards::igb_value2centile(val = weight_kg,                                               gagebrth = gest_days,                                               sex = sex_gs, var = \"wtkg\")     )   }) |>   dplyr::mutate(desc = attr(expression, which = \"description\")) |>   dplyr::select(!expression, !result, !memory, !time, !gc)"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"stata-1","dir":"Articles","previous_headings":"INTERGROWTH-21st Newborn Size standards > Timing","what":"Stata","title":"Benchmarking gigs against other software packages","text":"can benchmark speed Stata command:  set growth standards, Stata implementation GIGS slowest ~471 ms. growthstandards gigs packages fastest ~72 ~80 ms, respectively.","code":"# Save .dta file equivalent of benchmarking table. This can be used to benchmark # Stata packages. haven::write_dta(   data = ds_ig_nbs,   path = file.path(\"exclude\", \"statabench\", \"bench_ds_ig_nbs.dta\") ) // This is Stata code foreach i in 1 10 100 500 1000 5000 10000 25000 50000 75000 100000 {     use \"benchmarking/bench_ds_ig_nbs.dta\", clear     qui drop if _n > `i'     di \"Number of inputs: `i'\"     bench, reps(25) restore last: ///         qui egen double z_gigs = ig_nbs(y, \"wfga\", \"v2z\"), ///             gest_days(x) sex(sex) sexcode(m=M, f=F) }"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"package-comparisons-numerical-consistency-1","dir":"Articles","previous_headings":"INTERGROWTH-21st Newborn Size standards","what":"Package comparisons: numerical consistency","title":"Benchmarking gigs against other software packages","text":"testing INTERGROWTH-21st Newborn Size standards, found implementation growthstandards perform coefficient interpolation INTERGROWTH-21st Newborn Size standards utilise mu/sigma/nu/tau coefficients. Instead, growthstandards uses round() round non-integer gestational ages nearest value, gets mu/sigma/nu/tau coefficients rounded GA. leads smaller-scale version z-scoring errors found Kiger et al. (2016) interpolating LMS coefficients standards.","code":"weight_kg <- 3 gestage <- seq(274, 278, 0.5) gigs <- gigs::value2centile(y = weight_kg, x = gestage, sex = \"M\",                             family = \"ig_nbs\", acronym = \"wfga\") gs <- growthstandards::igb_value2centile(val = weight_kg, gagebrth = gestage,                                          sex = \"Male\", var = \"wtkg\") waldo::compare(gigs, gs / 100, x_arg = \"gigs\", y_arg = \"growthstandards\") ##     gigs   | growthstandards     ## [1] 0.2536 | 0.2536          [1] ## [2] 0.2448 - 0.2536          [2] ## [3] 0.2361 | 0.2361          [3] ## [4] 0.2278 - 0.2196          [4] ## [5] 0.2196 | 0.2196          [5] ## [6] 0.2117 - 0.2196          [6] ## [7] 0.2040 | 0.2040          [7] ## [8] 0.1966 - 0.1894          [8] ## [9] 0.1894 | 0.1894          [9]"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"intergrowth-21st-postnatal-growth-standards","dir":"Articles","previous_headings":"","what":"INTERGROWTH-21st Postnatal Growth standards","title":"Benchmarking gigs against other software packages","text":"IG-21st Postnatal Growth standards implemented gigs R Stata, growthstandards package. Let’s make new dataset, ds_ig_png, use benchmark functions: first 10 rows dataset look like :","code":"ac_ig_png <- \"wfa\" ds_ig_png <- benchmark_dataset(n = 100000,                                family = \"ig_png\",                                acronym = ac_ig_png) ds_ig_png[1:10, ] ##              z        x sex family acronym         y ## 1   0.17839158 58.40312   F ig_png     wfa 6.5562438 ## 2   1.08068286 32.61149   F ig_png     wfa 1.8816314 ## 3  -0.70269294 40.05188   M ig_png     wfa 3.1214845 ## 4   0.09501730 32.00000   F ig_png     wfa 1.4795115 ## 5  -0.44829268 28.00000   M ig_png     wfa 0.7593354 ## 6  -0.35747447 45.00000   M ig_png     wfa 4.3490091 ## 7   1.16612927 47.00000   F ig_png     wfa 5.3082323 ## 8  -0.08746512 47.18337   M ig_png     wfa 4.9659712 ## 9  -0.47685189 32.05188   M ig_png     wfa 1.4834561 ## 10  0.80015420 27.40312   M ig_png     wfa 0.8630054"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"r-2","dir":"Articles","previous_headings":"INTERGROWTH-21st Postnatal Growth standards > Timing","what":"R","title":"Benchmarking gigs against other software packages","text":"","code":"bp_ig_png <- bench::press(   input_len = c(1, 1000, 10000, seq(25000, 100000, 25000)),   {     weight_kg <- ds_ig_png$y[1:input_len]     pma_weeks <- ds_ig_png$x[1:input_len]     pma_days <- (pma_weeks * 7)[1:input_len]     acronym <- ds_ig_png$acronym[1:input_len]     sex <- ds_ig_png$sex[1:input_len]     sex_gs <- ifelse(sex == \"M\", \"Male\", \"Female\")     bench::mark(       check = FALSE, filter_gc = TRUE, time_unit = \"ms\", min_iterations = 50,       gigs = gigs::value2zscore(weight_kg, pma_weeks, sex,                                 family = \"ig_png\", acronym = ac_ig_png),       gs = growthstandards::igprepost_value2zscore(val = weight_kg,                                                    pmagedays = pma_days,                                                    sex = sex_gs, var = \"wtkg\")     )   }) |>   dplyr::mutate(desc = attr(expression, which = \"description\")) |>   dplyr::select(!expression, !result, !memory, !time, !gc)"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"stata-2","dir":"Articles","previous_headings":"INTERGROWTH-21st Postnatal Growth standards > Timing","what":"Stata","title":"Benchmarking gigs against other software packages","text":"INTERGROWTH-21st Postnatal Growth standards, Stata implementation GIGS slowest ~164 ms. gigs growthstandards packages fastest ~43 ~20 ms, respectively.","code":"# Save .dta file equivalent of benchmarking table. This can be used to benchmark # Stata packages. haven::write_dta(   data = ds_ig_png,   path = file.path(\"exclude\", \"statabench\", \"bench_ds_ig_png.dta\") ) // This is Stata code foreach i in 1 10 100 500 1000 5000 10000 25000 50000 75000 100000 {     use \"benchmarking/bench_ds_ig_png.dta\", clear     qui drop if _n > `i'     di \"Number of inputs: `i'\"     bench, reps(25) restore last: ///         qui egen double z_gigs = ig_png(y, \"wfga\", \"v2z\"), ///             xvar(x) sex(sex) sexcode(m=M, f=F) }"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"intergrowth-21st-fetal-standards","dir":"Articles","previous_headings":"","what":"INTERGROWTH-21st Fetal standards","title":"Benchmarking gigs against other software packages","text":"IG-21st Fetal standards implemented gigs R Stata, growthstandards intergrowth packages (though fully intergrowth growthstandards, missing standards included gigs). Let’s make new dataset, ds_ig_fet, use benchmark conversion fetal growth standard common three packages: first 10 rows dataset look like :","code":"ac_ig_fet <- \"ofdfga\" ds_ig_fet <- benchmark_dataset(n = 100000,                                family = \"ig_fet\",                                acronym = ac_ig_fet) ds_ig_fet[1:10, ]"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"r-3","dir":"Articles","previous_headings":"INTERGROWTH-21st Fetal standards > Timing","what":"R","title":"Benchmarking gigs against other software packages","text":"","code":"bp_ig_fet <- bench::press(   input_len = c(1, 1000, 10000, seq(25000, 100000, 25000)),   {     gest_days <- ds_ig_fet$x[1:input_len]     gest_wks <- gest_days / 7     acronym <- ds_ig_fet$acronym[1:input_len]     ofd_mm <- ds_ig_fet$y[1:input_len]     ofd_cm <- ofd_mm / 10     bench::mark(       check = FALSE, filter_gc = TRUE, time_unit = \"ms\", min_iterations = 50,       gigs = gigs::value2zscore(ofd_mm, gest_days,                                 family = \"ig_fet\", acronym = ac_ig_fet),       gs = growthstandards::igfet_value2zscore(val = ofd_cm,                                                gagedays = gest_days,                                                var = \"ofdcm\"),       intergrowth = intergrowth::calculate_ofd_gestage(ofd = ofd_mm,                                                        gestage = gest_wks)[[1]],     )   }) |>   dplyr::mutate(desc = attr(expression, which = \"description\")) |>   dplyr::select(!expression, !result, !memory, !time, !gc)"},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"stata-3","dir":"Articles","previous_headings":"INTERGROWTH-21st Fetal standards > Timing","what":"Stata","title":"Benchmarking gigs against other software packages","text":"INTERGROWTH-21st Fetal standard occipito-frontal diameter, GIGS implementation Stata slowest analyse 100,000 inputs ~93 ms. R gigs package fastest ~8 ms, followed growthstandards ~10, intergrowth ~16.","code":"# Save .dta file equivalent of benchmarking table. This can be used to benchmark # Stata packages. haven::write_dta(   data = ds_ig_fet,   path = file.path(\"exclude\", \"statabench\", \"bench_ds_ig_fet.dta\") ) // This is Stata code foreach i in 1 10 100 500 1000 5000 10000 25000 50000 75000 100000 {     use \"benchmarking/bench_ds_ig_fet.dta\", clear     qui drop if _n > `i'     di \"Number of inputs: `i'\"     bench, reps(25) restore last: ///         qui egen double z_gigs = ig_fet(y, \"ofdfga\", \"v2z\"), xvar(x) }"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"timings-summary-100000-inputs","dir":"Articles","previous_headings":"Summary","what":"Timings summary (100,000 inputs)","title":"Benchmarking gigs against other software packages","text":"Note: zscorer NA couldn’t time 100,000 inputs (takes long).","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"why-gigs","dir":"Articles","previous_headings":"Summary","what":"Why GIGS?","title":"Benchmarking gigs against other software packages","text":"Overall, though gigs package R isn’t always fastest, milliseconds , offers: full complement international growth standards (.e. half-implemented sets growth standards) accurate implementations cases Growth categorisation functions users may want apply growth references work - ’s fine, R packages (e.g. childsds R zanthro Stata) offer reference charts may use end-users. However, international growth standards, believe offer best combination speed range standards. R, gigs also offers input checking via options, tell ’re providing non-workable data. think outweighs couple milliseconds’ slowdown. Stata, gigs consistently runs faster offers growth standards zanthro, gigs obvious choice.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/benchmarking.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Benchmarking gigs against other software packages","text":"","code":"sessionInfo() ## R version 4.4.1 (2024-06-14 ucrt) ## Platform: x86_64-w64-mingw32/x64 ## Running under: Windows 8 x64 (build 9200) ##  ## Matrix products: default ##  ##  ## locale: ## [1] LC_COLLATE=English_United Kingdom.1252  ## [2] LC_CTYPE=English_United Kingdom.1252    ## [3] LC_MONETARY=English_United Kingdom.1252 ## [4] LC_NUMERIC=C                            ## [5] LC_TIME=English_United Kingdom.1252     ##  ## time zone: Europe/London ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] gigs_0.4.1.9000   withr_3.0.1       dplyr_1.1.4       testthat_3.2.1.1  ##  [5] rmarkdown_2.28    knitr_1.48        vctrs_0.6.5       rlang_1.1.4       ##  [9] gamlss.dist_6.1-1 checkmate_2.3.2   ##  ## loaded via a namespace (and not attached): ##  [1] tidyselect_1.2.1       farver_2.1.2           anthro_1.0.1           ##  [4] fastmap_1.2.0          promises_1.3.0         growthstandards_0.1.6  ##  [7] digest_0.6.37          timechange_0.3.0       mime_0.12              ## [10] lifecycle_1.0.4        waldo_0.5.3            ellipsis_0.3.2         ## [13] survival_3.6-4         processx_3.8.4         magrittr_2.0.3         ## [16] compiler_4.4.1         tools_4.4.1            utf8_1.2.4             ## [19] data.table_1.16.0      labeling_0.4.3         childsds_0.8.0         ## [22] htmlwidgets_1.6.4      pkgbuild_1.4.4         bench_1.1.3            ## [25] pkgload_1.4.0          miniUI_0.1.1.1         purrr_1.0.2            ## [28] desc_1.4.3             grid_4.4.1             fansi_1.0.6            ## [31] diffobj_0.3.5          urlchecker_1.0.1       profvis_0.4.0          ## [34] future_1.34.0          xtable_1.8-4           colorspace_2.1-1       ## [37] ggplot2_3.5.1          globals_0.16.3         scales_1.3.0           ## [40] MASS_7.3-60.2          intergrowth_0.0.0.9001 cli_3.6.3              ## [43] survey_4.4-2           crayon_1.5.3           generics_0.1.3         ## [46] remotes_2.5.0          rstudioapi_0.16.0      sessioninfo_1.2.2      ## [49] DBI_1.2.3              cachem_1.1.0           profmem_0.6.0          ## [52] stringr_1.5.1          splines_4.4.1          parallel_4.4.1         ## [55] mitools_2.4            devtools_2.4.5         Matrix_1.7-0           ## [58] callr_3.7.6            gamlss_5.4-22          listenv_0.9.1          ## [61] sitar_1.4.0            tidyr_1.3.1            parallelly_1.38.0      ## [64] glue_1.8.0             rematch2_2.1.2         zscorer_0.3.1          ## [67] codetools_0.2-20       ps_1.8.0               stringi_1.8.4          ## [70] lubridate_1.9.3        rsample_1.2.1          gtable_0.3.5           ## [73] later_1.3.2            munsell_0.5.1          tibble_3.2.1           ## [76] pillar_1.9.0           furrr_0.3.1            htmltools_0.5.8.1      ## [79] brio_1.1.5             gamlss.data_6.0-6      R6_2.5.1               ## [82] rprojroot_2.0.4        evaluate_1.0.0         shiny_1.9.1            ## [85] lattice_0.22-6         backports_1.5.0        memoise_2.0.1          ## [88] httpuv_1.6.15          Rcpp_1.0.13            AGD_0.45.0             ## [91] nlme_3.1-164           xfun_0.47              fs_1.6.4               ## [94] forcats_1.0.0          usethis_3.0.0          pkgconfig_2.0.3"},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to gigs","text":"Produced part Guidance International Growth Standards project London School Hygiene & Tropical Medicine, gigs provides single, simple interface working Child Growth standards outputs INTERGROWTH-21st project. provides functions easy reproducible classification fetal, newborn, infant growth using international growth standards. package allows conversions classifications growth measurements centiles, z-scores, common international metrics stunting.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"getting-started","dir":"Articles","previous_headings":"Introduction","what":"Getting started","title":"Introduction to gigs","text":"Let’s start loading package. vignette two examples applying gigs. first using gigs convert growth measurements centiles z-scores according appropriate standards either INTERGROWTH-21st Child Growth standards. second using gigs convert growth measurements categorical growth outcomes, case size--gestational age.","code":"library(gigs)"},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"example-data","dir":"Articles","previous_headings":"Introduction","what":"Example data","title":"Introduction to gigs","text":"tutorial uses sample data 300 infants enrolled Low birthweight Infant Feeding Exploration (LIFE) study1,2. infants assessed birth followed intervals birth, data available six months age data extract. Though gigs::life6mo data length cm (len_cm), head circumference (headcirc_cm), mid-upper arm circumference (muac_cm), going subset dataset focus weight kilograms (wt_kg). dataset also columns ID number per infant study (id), gestational age birth infant (gestage), sex infant (sex; \"M\" = male, \"F\" = female), visit week weight recorded (visitweek), post-menstrual age days (pma). loading dataset, add variable preterm, TRUE wherever infant born 37 weeks’ gestational age. also convert sex factor character variable gigs accept input.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"loading-the-data","dir":"Articles","previous_headings":"Introduction > Example data","what":"Loading the data","title":"Introduction to gigs","text":"","code":"data(life6mo) life6mo <- life6mo[, 1:7] # Removes `len_cm`, `headcirc_cm`, and `muac_cm` life6mo$preterm <- life6mo$gestage < 37 * 7 life6mo$sex <- as.character(life6mo$sex) life6mo$id <- as.factor(life6mo$id) head(life6mo, n = 5) #>   id gestage sex visitweek pma age_days wt_kg preterm #> 1  1     273   M         0 273        0 2.300   FALSE #> 2  1     273   M         1 280        7 2.185   FALSE #> 3  1     273   M         2 288       15 2.325   FALSE #> 4  1     273   M         4 301       28 2.575   FALSE #> 5  1     273   M         6 316       43 3.410   FALSE"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"single-step-approach","dir":"Articles","previous_headings":"Using gigs to convert growth measurements to z-scores","what":"Single-step approach","title":"Introduction to gigs","text":"easiest way use gigs let handle work . Using z-scoring functions, can apply GIGS-recommended growth standards measurement time point data. Standards applied based best practices advised INTERGROWTH-21st using respective growth standards. can use gigs_waz() add weight--age z-scores dataset single step: plotting mean weight--age z-scores function visit week, see preterm z-scores LIFE data extract average higher term infants. expected dataset, term infants LIFE study included particularly small birth. contrast, preterm infants included irrespective relative size birth.","code":"life6mo_zscored <- life6mo life6mo_zscored$waz <- gigs_waz(weight_kg = life6mo$wt_kg,                                 age_days = life6mo$age_days,                                 gest_days = life6mo$gestage,                                 sex = life6mo$sex,                                 id = life6mo$id) #> Warning in gigs_waz(weight_kg = life6mo$wt_kg, age_days = life6mo$age_days, : There were 134 'at birth' observations where `age_days` > 0.5. #> ℹ This occurred for IDs 2, 3, 6, 7, 12, 13, 14, 16, 20, 21, 22, 23, 24, …, 295, #>   and 298. life6mo_zscored[, c(\"id\", \"visitweek\", \"gestage\", \"age_days\", \"sex\", \"waz\")] |>   head(n = 5) #>   id visitweek gestage age_days sex       waz #> 1  1         0     273        0   M -2.298544 #> 2  1         1     273        7   M -3.026682 #> 3  1         2     273       15   M -3.249340 #> 4  1         4     273       28   M -3.619941 #> 5  1         6     273       43   M -2.796237"},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"multi-step-approach","dir":"Articles","previous_headings":"Using gigs to convert growth measurements to z-scores","what":"Multi-step approach","title":"Introduction to gigs","text":"Instead letting gigs heavy lifting, may want clearly lay steps taken analysis. Luckily, gigs provides functionality need . start generating WAZs using growth standard. , need use gigs conversion functions. take vectors growth data convert z-scores centiles. can use either value2zscore() value2zcentile() depending conversion want . pass two parameters, family acronym, describe: ig_fet - INTERGROWTH-21st Fetal standards3–9 ig_nbs - INTERGROWTH-21st Newborn Size Standards (incl. preterm)10–12 ig_png - INTERGROWTH-21st Postnatal Growth Standards13 who_gs - Child Growth Standards14–16 \"wfa\" (weight--age) \"lfa\" (length--age) \"hcfa\" (head circumference--age) \"wfl\" (weight--length) “bounds” warning *gigs** tells us couldn’t calculate z-score 128 observations, post-menstrual age observations outside range INTERGROWTH-21st Postnatal Growth Standards (.e. 27 64 weeks’ post-menstrual age). Nonetheless, now standard-specific WAZs. can use chain ifelse() functions make one overall waz column life6mo. first condition, visitweek == 0, ensures INTERGROWTH-21st Newborn Size standards used measures taken visit week zero (study, equivalent -birth). preterm pma <= 64 * 7 conditions ensure INTERGROWTH-21st Postnatal Growth standards used preterm infants younger 64 weeks PMA (upper limit INTERGROWTH-21st Postnatal Growth standards). final condition, use_who_gs, ensures Child Growth standard z-scores used wherever infants either born term, born preterm older 64 weeks PMA. plotting mean WAZ visit week, get plot used z-scores classify_wfa()!  Sure - can , manually makes likely apply wrong growth standard given observation. Instead, use gigs_waz() function friends (gigs_lhaz(), gigs_wlz(), gigs_hcaz()) automatically use growth standards suggested GIGS observation data.","code":"waz_nbs <- with(life6mo, value2zscore(y = wt_kg,                                       x = gestage,                                       sex = sex,                                       family = \"ig_nbs\",                                       acronym = \"wfga\")) waz_who <- with(life6mo, value2zscore(y =  wt_kg,                                       x = age_days,                                       sex = sex,                                       family = \"who_gs\",                                       acronym = \"wfa\")) waz_png <- with(life6mo, value2zscore(y =  wt_kg,                                       x = pma / 7,                                       sex = sex,                                       family = \"ig_png\",                                       acronym = \"wfa\")) #> Warning in value2zscore(y = wt_kg, x = pma/7, sex = sex, family = \"ig_png\", : Input arguments have invalid values: #> ℹ Argument `x`: 128 in 2191 elements were out-of-bounds (see the GIGS conversion function documentation for bounds). is_birth_measure <- with(life6mo_zscored, visitweek == 0) use_ig_nbs <- with(life6mo_zscored, is_birth_measure) use_ig_png <- with(life6mo_zscored,                    !is_birth_measure & preterm & pma <= 64 * 7) use_who_gs <- with(life6mo_zscored,                    !is_birth_measure & !preterm | (preterm & pma > 64 * 7)) life6mo_zscored$waz_complex <- rep.int(NA_real_, nrow(life6mo_zscored)) life6mo_zscored$waz_complex[use_ig_nbs] <- waz_nbs[use_ig_nbs] life6mo_zscored$waz_complex[use_ig_png] <- waz_png[use_ig_png] life6mo_zscored$waz_complex[use_who_gs] <- waz_who[use_who_gs]"},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"using-gigs-to-obtaining-growth-outcomes-from-measurements","dir":"Articles","previous_headings":"","what":"Using gigs to obtaining growth outcomes from measurements","title":"Introduction to gigs","text":"gigs package contains functions can used assess range common growth outcomes: Size--gestational age compute_sfga()/classify_sfga() Small, vulnerable newborns compute_svn()/classify_svn() Stunting compute_stunting()/classify_stunting() Wasting compute_wasting()/classify_wasting() Weight--age compute_wfa()/classify_wfa() Head size compute_headsize()/classify_headsize() can also obtain classifications outcomes simultaneously using classify_growth(). vignette, focus size--GA small, vulnerable newborn (SVN) classifications.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"size-for-ga","dir":"Articles","previous_headings":"Using gigs to obtaining growth outcomes from measurements","what":"Size-for-GA","title":"Introduction to gigs","text":"can use compute_sfga() obtain counts size--GA categories dataset. can convert counts percentages:  dataset, bulk newborns SGA - stratify size--GA classifications based whether infants term preterm?","code":"# Restrict LIFE data to only rows with birthweights (i.e. age <12hrs) that # have all a weight, GA, and sex value life6mo_newborns <- with(life6mo,  life6mo[visitweek == 0 & age_days < 0.5 & complete.cases(wt_kg, gestage, sex), ] )  # Compute birthweight centiles and convert these to size-for-GA categories life6mo_newborns$sfga <- with(life6mo_newborns,                               compute_sfga(weight_kg = wt_kg,                                            gest_days = gestage,                                            sex = sex)) sfga_summary <- with(life6mo_newborns, summary(sfga[!is.na(sfga)])) sfga_summary <- round(sfga_summary / sum(sfga_summary) * 100, 2) sfga_summary #>   SGA   AGA   LGA  #> 72.56 25.00  2.44"},{"path":"https://lshtm-gigs.github.io/gigs/articles/gigs.html","id":"small-vulnerable-newborns","dir":"Articles","previous_headings":"Using gigs to obtaining growth outcomes from measurements","what":"Small vulnerable newborns","title":"Introduction to gigs","text":"full SVN framework stratifies small, -risk newborns based combination size--GA, whether low birth-weight (LBW; birth weight < 2500g), whether born term preterm17. global analysis SVN type prevalence mortality, Lawn et al.18 focused smaller subset SVN categories omitted whether infants LBW. gigs package offers SVN classification functionality smaller subset SVN categories, 99.5% global LBW consequence preterm birth SGA. classify SVN gigs, compute_svn() function can used. can convert counts SVN category percentages, plot results: plotting data, find bulk SGA cases term infants. usually expect size--GA categories distributed similarly preterm term infants. However, due sampling process LIFE study, expect term infants SGA whilst preterm infants mix SGA/AGA/LGA.","code":"life6mo_newborns$svn <- with(life6mo_newborns,                              compute_svn(weight_kg = wt_kg,                                          gest_days = gestage,                                          sex = sex)) #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Term AGA\" and \"Term LGA\". svn_summary <- with(life6mo_newborns, summary(svn[!is.na(svn)])) svn_summary <- round(svn_summary / sum(svn_summary) * 100, 2) svn_summary #> Preterm SGA Preterm AGA Preterm LGA    Term SGA    Term AGA    Term LGA  #>       15.24       25.00        2.44       57.32        0.00        0.00"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"contextual-clues","dir":"Articles","previous_headings":"","what":"Contextual clues","title":"INTERGROWTH-21st Body Composition Equations","text":"identify way body composition standards modelled, need look published centile tables formatted. Consider standard fat mass gestational age (\"fmfga\") females:","code":"fmfga_female ## # A tibble: 5 × 6 ##   gest_days   P03   P10   P50   P90   P97 ##       <int> <int> <int> <int> <int> <int> ## 1       266    29   123   324   525   619 ## 2       273    62   156   357   558   652 ## 3       280    96   190   391   592   686 ## 4       287   127   221   422   623   717 ## 5       294   150   244   445   646   740"},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"differences-between-each-ga-in-fmfga","dir":"Articles","previous_headings":"Contextual clues","what":"Differences between each GA in fmfga","title":"INTERGROWTH-21st Body Composition Equations","text":"Let’s first compare differences time fat-mass GA. column, ’ll subtract value previous row current row produce table differences (see check_differences() ). ’ll check differences row equal centiles, store all_equal column. Let’s check results fmfga_female: differences fat mass equal across percentiles gestational ages, according all_equal column. standard deviation (σ\\sigma) changed gestational age (GA), all_equal age. hints centile curves, mean value (μ\\mu) fat mass calculated first, summed product desired zz-score/centile standard deviation (σ\\sigma) constant across different GAs: y=μ+z×σ\\begin{align*} y = \\mu + z\\times\\sigma \\end{align*}","code":"check_differences <- function(centile_tbl) {   centile_tbl |>     dplyr::mutate(dplyr::across(.cols = tidyselect::starts_with(match = \"P\"),                                 .fns = list(diff = \\(x) x - dplyr::lag(x))),                   .keep = \"unused\") |>     dplyr::filter(dplyr::if_any(             tidyselect::starts_with(match = \"P\"), ~ !is.na(.))) |>     dplyr::rowwise() |>     dplyr::mutate(       all_equal = dplyr::n_distinct(P03_diff, P10_diff, P50_diff, P90_diff,                                     P97_diff, na.rm = TRUE),       all_equal = as.logical(all_equal)) |>     dplyr::ungroup() } check_differences(fmfga_female) ## # A tibble: 4 × 7 ##   gest_days P03_diff P10_diff P50_diff P90_diff P97_diff all_equal ##       <int>    <int>    <int>    <int>    <int>    <int> <lgl>     ## 1       273       33       33       33       33       33 TRUE      ## 2       280       34       34       34       34       34 TRUE      ## 3       287       31       31       31       31       31 TRUE      ## 4       294       23       23       23       23       23 TRUE"},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"in-the-other-standards","dir":"Articles","previous_headings":"Contextual clues > Differences between each GA in fmfga","what":"In the other standards","title":"INTERGROWTH-21st Body Composition Equations","text":"equality hold centile tables? . first value, corresponding fmfga_male, FALSE. Let’s see differences look like table: issue value 38 rather 39s P10_diff column - difference small enough consequence rounding, opposed real difference σ\\sigma GA compared GAs.","code":"other_standards <- list(fmfga_male, bfpfga_male, bfpfga_female, ffmfga_male,                         ffmfga_female) vapply(X = other_standards,        FUN = \\(x) all(check_differences(x)$all_equal),        FUN.VALUE = logical(length = 1L)) ## [1] FALSE  TRUE  TRUE  TRUE  TRUE check_differences(fmfga_male) ## # A tibble: 4 × 7 ##   gest_days P03_diff P10_diff P50_diff P90_diff P97_diff all_equal ##       <int>    <int>    <int>    <int>    <int>    <int> <lgl>     ## 1       273       NA       38       39       39       39 FALSE     ## 2       280       40       40       40       40       40 TRUE      ## 3       287       42       42       42       42       42 TRUE      ## 4       294       24       24       24       24       24 TRUE"},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"INTERGROWTH-21st Body Composition Equations","text":"reconstruct standards, need determine equations μ\\mu standard. also need calculate σ\\sigma, change GA.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"custom-functions","dir":"Articles","previous_headings":"Extracting models from published tables","what":"Custom functions","title":"INTERGROWTH-21st Body Composition Equations","text":"following custom functions perform several tasks: run_LMs() fits models INTERGROWTH-21st normative body composition standard using lm(), returns fitted models list. std_deviation() determines σ\\sigma given centile. extract_SDs() gets standard deviations centile GA. extract_eqn() uses functions extract ‘best possible’ equation standard use, prints console.","code":"run_LMs <- function(df) {   model_linear <- lm(P50 ~ gest_days, data = df)   model_poly1 <- lm(P50 ~ poly(gest_days, degree = 1, raw = TRUE), data = df)   model_poly2 <- lm(P50 ~ poly(gest_days, degree = 2, raw = TRUE), data = df)   model_poly3 <- lm(P50 ~ poly(gest_days, degree = 3, raw = TRUE), data = df)   list(model_linear, model_poly1, model_poly2, model_poly3) }  #' Extract standard deviation from centiles #' @param P50 Value of y at mean #' @param PX Value of y at centile specified by `p` #' @param p Centile at which y = PX std_deviation <- function(P50, PX, p) (PX - P50) / qnorm(p = p)  extract_SDs <- function(df) {   stddev_03 <- std_deviation(df$P50, df$P03, p = 0.03)   stddev_10 <- std_deviation(df$P50, df$P10, p = 0.10)   stddev_90 <- std_deviation(df$P50, df$P90, p = 0.90)   stddev_97 <- std_deviation(df$P50, df$P97, p = 0.97)   stddevs <- c(stddev_03, stddev_10, stddev_90, stddev_97)   mean(stddevs, na.rm = TRUE) }  #' Extract equation and standard deviation; print to console #' @param df A centile table for `fmfga`, `bfpfga` or `ffmfga`. extract_eqn <- function(df, verbose = TRUE) {   li_models <- run_LMs(df)   r_sq_adj <- vapply(X = li_models,                      FUN = \\(x) summary(x)$adj.r.squared,                      FUN.VALUE = numeric(length = 1L))   chosen_model <- li_models[[which(r_sq_adj == max(r_sq_adj))]]   if (!verbose) {     return(chosen_model)   }   model_coeffs <- coef(chosen_model)   coef_str <- lapply(     X = 2:length(model_coeffs),     FUN = \\(x) {       start_str <- if (sign(model_coeffs[x]) == -1) \"\" else \"+\"       end_str <- if (x == 2) \"* x\" else paste0(\"* x^\", x - 1)       paste(start_str, round(model_coeffs[x], 5), end_str)     }) |>     paste(collapse = \" \")   sign_ <- if (sign(model_coeffs[2]) == -1) \"\" else \"+\"   cat(paste(\"y =\", round(model_coeffs[[1]], 5), sign_, coef_str), sep = \"\\n\")    SDs <- extract_SDs(df)    cat(paste(\"sigma =\", round(mean(SDs, na.rm = TRUE), digits = 4)), sep = \"\\n\")   invisible(chosen_model) }"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"males","dir":"Articles","previous_headings":"Extracting models from published tables > Fat mass","what":"Males","title":"INTERGROWTH-21st Body Composition Equations","text":"","code":"fmfga_male <- gigs::ig_nbs$fmfga$male$centiles extract_eqn(fmfga_male) ## y = 96787.8   -1056.77381 * x + 3.83673 * x^2  -0.00462 * x^3 ## sigma = 152.0728"},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"females","dir":"Articles","previous_headings":"Extracting models from published tables > Fat mass","what":"Females","title":"INTERGROWTH-21st Body Composition Equations","text":"","code":"fmfga_female <- gigs::ig_nbs$fmfga$female$centiles extract_eqn(fmfga_female) ## y = 44432.51429   -490.7602 * x + 1.80321 * x^2  -0.00219 * x^3 ## sigma = 156.8449"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"males-1","dir":"Articles","previous_headings":"Extracting models from published tables > Body fat percentage","what":"Males","title":"INTERGROWTH-21st Body Composition Equations","text":"","code":"bfpfga_male <- gigs::ig_nbs$bfpfga$male$centiles extract_eqn(bfpfga_male) ## y = 1521.84857   -16.62398 * x + 0.0605 * x^2  -7e-05 * x^3 ## sigma = 3.6562"},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"females-1","dir":"Articles","previous_headings":"Extracting models from published tables > Body fat percentage","what":"Females","title":"INTERGROWTH-21st Body Composition Equations","text":"","code":"bfpfga_female <- gigs::ig_nbs$bfpfga$female$centiles extract_eqn(bfpfga_female) ## y = -66.09143 + + 0.48102 * x  -0.00073 * x^2 ## sigma = 3.9547"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"males-2","dir":"Articles","previous_headings":"Extracting models from published tables > Fat-free mass","what":"Males","title":"INTERGROWTH-21st Body Composition Equations","text":"","code":"ffmfga_male <- gigs::ig_nbs$ffmfga$male$centiles extract_eqn(ffmfga_male) ## y = 347879.97143   -3780.52721 * x + 13.73032 * x^2  -0.01652 * x^3 ## sigma = 276.5094"},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"females-2","dir":"Articles","previous_headings":"Extracting models from published tables > Fat-free mass","what":"Females","title":"INTERGROWTH-21st Body Composition Equations","text":"","code":"ffmfga_female <- gigs::ig_nbs$ffmfga$female$centiles extract_eqn(ffmfga_female) ## y = 154457.42857   -1689.0085 * x + 6.20845 * x^2  -0.00753 * x^3 ## sigma = 261.0625"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"comparing-fitted-values-with-published-values","dir":"Articles","previous_headings":"","what":"Comparing fitted values with published values","title":"INTERGROWTH-21st Body Composition Equations","text":"plotting code section can found source code vignette.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"reconstructing-the-equations-in-r","dir":"Articles","previous_headings":"Comparing fitted values with published values","what":"Reconstructing the equations in R","title":"INTERGROWTH-21st Body Composition Equations","text":"First, bind coefficients model table. table can used look coefficients body composition standard. body_comp_centile2value() estimate y given gestational age days (x), sex acronym. body_comp_centile2value_old() function , uses parameters older linear models standard.","code":"all_standards <- list(fmfga_male, fmfga_female, bfpfga_male, bfpfga_female,                       ffmfga_male, ffmfga_female) models <- lapply(all_standards, FUN = \\(standard) {   model_coeffs <- standard |>     extract_eqn(verbose = FALSE) |>     coef() |>     t() |>     as.data.frame()   if (ncol(model_coeffs) == 3) model_coeffs$extra <- 0   names(model_coeffs) <- c(\"intercept\", \"x\", \"x^2\", \"x^3\")   model_coeffs$SD <- extract_SDs(standard)   model_coeffs }) |>   do.call(what = \"rbind\") rownames(models) <- c(\"fmfga_M\" , \"fmfga_F\" , \"bfpfga_M\", \"bfpfga_F\",                       \"ffmfga_M\", \"ffmfga_F\") models ##             intercept             x          x^2           x^3         SD ## fmfga_M   96787.80000 -1056.7738095  3.836734694 -0.0046161322 152.072842 ## fmfga_F   44432.51429  -490.7602041  1.803206997 -0.0021865889 156.844908 ## bfpfga_M   1521.84857   -16.6239796  0.060495627 -0.0000728863   3.656170 ## bfpfga_F    -66.09143     0.4810204 -0.000728863  0.0000000000   3.954716 ## ffmfga_M 347879.97143 -3780.5272109 13.730320700 -0.0165208941 276.509412 ## ffmfga_F 154457.42857 -1689.0085034  6.208454810 -0.0075315841 261.062458 ig_nbs_bc_centile2value <- function(p, x, sex, acronym) {   params <- t(models)[, paste0(acronym, \"_\", sex)]   SD <- params[[5]]   mu <- params[[1]] + params[[2]] * x + params[[3]] * x^2 + params[[4]] * x^3   mu + qnorm(p) * SD }  ig_nbs_bc_centile2value_old <- function(p, x, sex, acronym) {   z <- qnorm(p)   if (sex == \"M\") {     switch(acronym,            \"fmfga\"  = -1134.2 + 37.2  * x/7 + z * 152.1593,            \"bfpfga\" = -17.68  + 0.69  * x/7 + z * 3.6674,            \"ffmfga\" = -2487.6 + 139.9 * x/7 + z * 276.2276,            stop(\"Bad acronym\", .call = F))   } else if (sex == \"F\") {     switch(acronym,            \"fmfga\"  = -840.2 + 30.7  * x/7 + z * 156.8411,            \"bfpfga\" = -9.02  + 0.51  * x/7 + z * 3.9405,            \"ffmfga\" = -1279  + 105.3 * x/7 + z * 260.621,            stop(\"Bad acronym\", .call = F))   } }"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"making-percentile-tables","dir":"Articles","previous_headings":"Comparing fitted values with published values","what":"Making percentile tables","title":"INTERGROWTH-21st Body Composition Equations","text":"","code":"#' Replicate centile tables as presented by Villar et al. repl_centile_tbls <- function(sex, acronym, bodycomp_fn) {   centiles <- c(0.03, 0.1, 0.5, 0.9, 0.97) |>     purrr::set_names(c(\"P03\", \"P10\", \"P50\", \"P90\", \"P97\"))   tbl <- purrr::map(.x = centiles, .f = ~ {       p <- .x       column <- seq(266, 294, by = 7) |>         purrr::set_names(paste(1:5)) |>         purrr::map_dfc(.f  = ~ {           bodycomp_fn(p, .x, sex, acronym)         }) |>       t()     column[which(column <= 0)] <- NA_real_     as.data.frame(column)     })   tbl <- suppressMessages(suppressWarnings(dplyr::bind_cols(tbl)))   colnames(tbl) <- names(centiles)   dplyr::mutate(tbl, gest_days = (38:42 * 7), .before = P03) }  #' Make centile tables based on parameters from new polynomial models repl_centile_tbls_new <- function(sex, acronym) {   repl_centile_tbls(sex, acronym, ig_nbs_bc_centile2value) }  #' Make centile tables based on parameters from linear models repl_centile_tbls_old <- function(sex, acronym) {   repl_centile_tbls(sex, acronym, ig_nbs_bc_centile2value_old) }"},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"observed-vs-fitted-values","dir":"Articles","previous_headings":"Comparing fitted values with published values","what":"Observed vs fitted values","title":"INTERGROWTH-21st Body Composition Equations","text":"Observed estimated normative centiles body composition measures according gestational age sex. Centiles (3rd, 10th, 50th, 90th, 97th) fat mass (males; b females); body fat percentage (c males; d females); fat-free mass (e males; f females) according gestational age. Red circles show observed value centile gestational age; dashed lines show estimates linear equations fitted observed values.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"reference-vs--predicted-values","dir":"Articles","previous_headings":"Comparing fitted values with published values > Bland-Altman plots","what":"Reference vs. predicted values","title":"INTERGROWTH-21st Body Composition Equations","text":"Bland-Altman plots observed estimated centile values body composition measures according gestational age sex. Circles show differences observed estimated values fat mass (males; b females); body fat percentage (c males; d females); fat-free mass (e males; f females) according average two measurements.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/articles/ig-nbs-body-composition.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"INTERGROWTH-21st Body Composition Equations","text":"Villar J, Puglia FA, Fenton TR, Ismal LC, Staines-Urias E, Giuliani F, et al. Body composition birth relationship neonatal anthropometric ratios: newborn body composition study INTERGROWTH-21st project Pediatric Research 2017, 82:305-316. doi: 10.1038/pr.2017.52","code":""},{"path":"https://lshtm-gigs.github.io/gigs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Parker. Author, maintainer. Linda Vesel. Data contributor. Eric Ohuma. Data contributor. Chitra Saraswati. Reviewer. Victor Ordu. Reviewer. Bill & Melinda Gates Foundation. Funder. London School Hygiene & Tropical Medicine. Copyright holder.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parker S, Vesel L, Ohuma E (2024). gigs: Assess Fetal, Newborn, Child Growth International Standards. 0.4.1.9002, https://github.com/lshtm-gigs/gigs/.","code":"@Manual{,   title = {{gigs}: Assess Fetal, Newborn, and Child Growth with International Standards},   author = {Simon Parker and Linda Vesel and Eric Ohuma},   year = {2024},   note = {0.4.1.9002},   url = {https://github.com/lshtm-gigs/gigs/}, }"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"Produced part Guidance International Growth Standards project London School Hygiene & Tropical Medicine, gigs provides single, simple interface working Child Growth standards outputs INTERGROWTH-21st project. find functions converting anthropometric measures (e.g. weight length) z-scores centiles, inverse. Also included functions classifying newborn infant growth according literature-based cut-offs. gigs use anyone interested fetal child growth, including child health researchers, policymakers, clinicians. package best suited growth data gestational age (GA) child known, use growth standards included gigs GA-dependent. recommend check available standards section see anthropometric measurements can converted z-scores/centiles gigs. recommend using gigs generate continuous categorical measures fetal/newborn/child growth, can used downstream analyses.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"","code":"# You can install the development version from GitHub with `remotes`: # install.packages(\"remotes\") remotes::install_github(repo = \"lshtm-gigs/gigs\")"},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"rationale--terminology","dir":"","previous_headings":"","what":"Rationale + terminology","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"working growth measurements individual children, helpful compare measurements growth standard, represents average growth population children. allows assessment individual growth - example, baby born small, later caught peers size. also allows compare measurements different children. standards growth can made different ways, best studies utilise international samples made thousands healthy fetuses, newborns, children. gigs, ’ll find different international growth standards, allowing compare growth measures children different ages, weights, heights, . general, ’ll use gigs transform raw growth measures z-scores centiles. Z-scores centiles represent location measurement within normal distribution values, : z-score number standard deviations mean given anthropometric measurement (e.g. height weight). centile represents proportion measurements distribution expect lower measurement ’ve taken. gigs, represented value 0 1. example, 0.5 corresponds 50th centile (.e. mean), whereas 0.75 corresponds 75th centile. growth data, z-scores centiles represent size fetus, newborn, child relative peers. Size considered relative standardising variable, usually age also another variable length. tracking child’s relative size grow, can see achieving growth potential . , may indicate underlying issues ill health undernutrition.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"classification-functions","dir":"","previous_headings":"","what":"Classification functions","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"gigs includes number functions permit fast identification -risk infants classification suboptimal growth. cut-offs used sourced research literature; can check function documentation see sources.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"growth-classification-in-dataframe-like-objects","dir":"","previous_headings":"Classification functions","what":"Growth classification in data.frame-like objects","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"Use classify_growth() function quickly compute growth indicators data.frame-like objects. classify_*()-style functions gigs use data-masking, provide data.frame-like object .data argument refer column names directly. classify_growth(), can also use .analyses argument specify growth indicators want classify. using classify_growth(), informed analyses wanted run successful. example , lenht_cm specified, stunting indicators computed. can also use classify_*() functions specific growth indicator ’d like calculate, example classify_svn() get small, vulnerable newborn classifications infant:","code":"life6mo_newborns <- gigs::life6mo[life6mo$age_days == 0, ]  # Use classify_growth() to get multiple growth indicators at once life6mo_classified <- classify_growth(   .data = life6mo_newborns,   gest_days = gestage,   age_days = age_days,   sex = as.character(sex),   weight_kg = wt_kg,   lenht_cm = len_cm,   id = as.factor(id),   .outcomes = c(\"svn\", \"stunting\") ) #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Term AGA\" and \"Term LGA\". #> ! Unused factor levels kept after stunting categorisation: \"outlier\". #>  #> ── `gigs::classify_growth()` ─────────────────────────────────────────────────── #> ✔ Small vulnerable newborns: Success #> ✔ Stunting: Success  head(life6mo_classified, n = 4) #>    id gestage sex visitweek pma age_days wt_kg   len_cm headcirc_cm  muac_cm #> 1   1     273   M         0 273        0  2.30 42.06667    33.26667 9.433333 #> 28  4     250   F         0 250        0  1.50 42.03333    30.03333 8.066667 #> 36  5     238   F         0 238        0  2.39 43.46667    33.63333 9.166667 #> 56  8     240   F         0 240        0  1.80 41.73333    31.46667 8.033334 #>    birthweight_centile         svn       lhaz        stunting stunting_outliers #> 1          0.010765424    Term SGA -3.5406446 stunting_severe   stunting_severe #> 28         0.002833163 Preterm SGA -2.2854751        stunting          stunting #> 36         0.756367868 Preterm AGA -0.6087434    not_stunting      not_stunting #> 56         0.126440075 Preterm AGA -1.6989568    not_stunting      not_stunting life6mo_classified <- classify_growth(   .data = life6mo_newborns,   gest_days = gestage,   age_days = age_days,   sex = as.character(sex),   weight_kg = wt_kg,   id = as.factor(id),   .outcomes = c(\"svn\", \"stunting\") ) #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Term AGA\" and \"Term LGA\". #>  #> ── `gigs::classify_growth()` ─────────────────────────────────────────────────── #> ✔ Small vulnerable newborns: Success #> ! Stunting: Not computed (`lenht_cm` not supplied)  head(life6mo_classified, n = 4) #>    id gestage sex visitweek pma age_days wt_kg   len_cm headcirc_cm  muac_cm #> 1   1     273   M         0 273        0  2.30 42.06667    33.26667 9.433333 #> 28  4     250   F         0 250        0  1.50 42.03333    30.03333 8.066667 #> 36  5     238   F         0 238        0  2.39 43.46667    33.63333 9.166667 #> 56  8     240   F         0 240        0  1.80 41.73333    31.46667 8.033334 #>    birthweight_centile         svn #> 1          0.010765424    Term SGA #> 28         0.002833163 Preterm SGA #> 36         0.756367868 Preterm AGA #> 56         0.126440075 Preterm AGA # Small vulnerable newborns - note no ID parameter, as it is assumed that all # measures are taken at birth life6mo_svn <- classify_svn(   .data = life6mo_newborns,   weight_kg = wt_kg,   gest_days = gestage,   sex = as.character(sex) ) #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Term AGA\" and \"Term LGA\".  head(life6mo_svn, n = 4) #>    id gestage sex visitweek pma age_days wt_kg   len_cm headcirc_cm  muac_cm #> 1   1     273   M         0 273        0  2.30 42.06667    33.26667 9.433333 #> 28  4     250   F         0 250        0  1.50 42.03333    30.03333 8.066667 #> 36  5     238   F         0 238        0  2.39 43.46667    33.63333 9.166667 #> 56  8     240   F         0 240        0  1.80 41.73333    31.46667 8.033334 #>    birthweight_centile         svn #> 1          0.010765424    Term SGA #> 28         0.002833163 Preterm SGA #> 36         0.756367868 Preterm AGA #> 56         0.126440075 Preterm AGA"},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"available-international-growth-standards","dir":"","previous_headings":"Conversion functions","what":"Available international growth standards","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"gigs facilitates proper use international growth standards, growth charts developed using international samples healthy singleton children born mothers health needs met pregnancy. represent international standard ‘optimal’ growth. gigs implements international growth standards INTERGROWTH-21st project: ig_nbs - INTERGROWTH-21st Newborn Size standards (including preterm)  Component standards Acronym Description Unit  x range wfga weight--GA kg 168 300 days lfga length--GA cm 168 300 days hcfga head circumference--GA cm 168 300 days wlrfga weight--length ratio--GA kg/cm 168 300 days ffmfga fat-free mass--GA kg 266 294 days bfpfga body fat percentage--GA % 266 294 days fmfga fat mass--GA kg 266 294 days ig_png - INTERGROWTH-21st Postnatal Growth Preterm Infants standards  Component standards Acronym Description Unit  x range wfa weight--age kg 27 ≤64 exact weeks lfa length--age cm 27 ≤64 exact weeks hcfa head circumference--age cm 27 ≤64 exact weeks wfl weight--length kg 35 65 cm ig_fet - INTERGROWTH-21st Fetal standards  Component standards Acronym Description Unit  x range hcfga head circumference--GA mm 98 280 days bpdfga biparietal diameter--GA mm 98 280 days acfga abdominal circumference--GA mm 98 280 days flfga femur length--GA mm 98 280 days ofdfga occipito-frontal diameter -GA mm 98 280 days efwfga estimated fetal weight--GA g 154 280 days sfhfga symphisis-fundal height--GA mm 112 294 days crlfga crown-rump length--GA mm 58 105 days gafcrl GA--crown-rump length days 15 95 mm gwgfga gestational weight gain--GA kg 98 280 days pifga pulsatility index--GA  168 280 days rifga resistance index--GA  168 280 days sdrfga systolic/diastolic ratio--GA  168 280 days tcdfga transcerebellar diameter--GA mm 98 280 days tcdfga GA--transcerebellar diameter mm 98 280 days poffga parietal-occipital fissure--GA mm 105 252 days sffga Sylvian fissue--GA mm 105 252 days avfga anterior horn lateral ventricle--GA mm 105 252 days pvfga atrium posterior horn lateral ventricle--GA mm 105 252 days cmfga cisterna magna--GA mm 105 252 days hefwfga Hadlock estimated fetal weight--GA g 126 287 days who_gs - Child Growth Standards term infants  Component standards Acronym Description Unit  x range wfa weight--age kg 0 1856 days bfa BMI--age kg/m2 0 1856 days lhfa length/height--age cm 0 1856 days hcfa head circumference--age cm 0 1856 days wfl weight--height kg 45 110 cm wfh weight--length kg 65 120 cm acfa arm circumference--age cm 91 1856 days ssfa subscapular skinfold--age mm 91 1856 days tsfa triceps skinfold--age mm 91 1856 days","code":""},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"usage","dir":"","previous_headings":"Conversion functions","what":"Usage","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"Conversion functions named according conversion perform. Either convert measured values z-scores/centiles (value2zscore()/value2centile()), generate expected values given z-scores/centiles (zscore2value()/centile2value()). tell gigs international growth standard use family acronym parameters. family parameter denotes set growth standards want use - e.g. \"ig_nbs\" INTERGROWTH-21st Newborn Size standards (including preterm). acronym parameter describes exact growth standard want growth standards ‘family’ standards. example, convert values z-scores weight--GA standard INTERGROWTH-21st Newborn Size standards, run value2zscore(..., family = \"ig_nbs\", acronym = \"wfga\"). Similarly, conversion length--age values centiles term preterm infants performed Child Growth standards INTERGROWTH-21st Postnatal Growth Preterm Infants standards, respectively: Preterm infants: value2centile(..., family = \"ig_png\", acronym = \"lfa\") Term infants: value2centile(..., family = \"who_gs\", acronym = \"lhfa\") don’t know units used given growth standard, report_units() function help . Run family acronym combination get help:","code":"report_units(family = \"ig_nbs\", acronym = \"wfga\") #> You're using \"wfga\" from the INTERGROWTH-21st Newborn Size Standards #> (\"ig_nbs\"). #> ℹ Units for `y`: Weight (kg). #> ℹ Units for `x`: Gestational age (days)."},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"values-to-z-scorescentiles","dir":"","previous_headings":"Conversion functions","what":"Values to z-scores/centiles","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"functions allow easy conversion measured values z-scores centiles standard used.","code":"# Convert from z-scores for individual values... value2zscore(y = 0.785, x = 182, sex = \"F\",              family = \"ig_nbs\", acronym = \"wfga\") |>   round(digits = 2) #> [1] 0  # .. or for multiple inputs value2centile(y = 0.785, x = seq(175, 196, by = 7), sex = \"F\",               family = \"ig_nbs\", acronym = \"wfga\") |>   round(digits = 2) #> [1] 0.75 0.50 0.25 0.09  # You can also get centiles value2centile(y = c(2.86, 3.12, 3.12, 3.43, 3.77, 4.10), x = 40, sex = \"M\",               family = \"ig_png\",  acronym = \"wfa\") |>   round(digits = 2) #> [1] 0.10 0.25 0.25 0.50 0.75 0.90"},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"z-scorescentiles-to-values","dir":"","previous_headings":"Conversion functions","what":"Z-scores/centiles to values","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"functions convert z-scores expected anthropometric measurements. mostly useful creation reference curves (see ).","code":"# Convert from z-scores for individual values... zscore2value(z = 0, x = 182, sex = \"F\",              family = \"ig_nbs\", acronym = \"wfga\") |>   round(digits = 3) #> [1] 0.785  # .. or for multiple inputs zscore2value(z = 0, x = seq(182, 204, by = 7), sex = \"F\",              family = \"ig_nbs\", acronym = \"wfga\") |>   round(digits = 3) #> [1] 0.785 0.893 1.013 1.147  # You can do the same for centiles centile2value(p = c(0.1, 0.25, 0.5, 0.75, 0.9), x = 40, sex = \"M\",               family = \"ig_png\", acronym = \"wfa\") |>   round(digits = 2) #> [1] 2.87 3.12 3.43 3.77 4.11"},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"reference-curves","dir":"","previous_headings":"Conversion functions > Z-scores/centiles to values","what":"Reference curves","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"can use gigs generate reference curves standards getting curves expected weight multiple z-scores across multiple gestational ages. usually recommend ggplot2 visualisation, use reduce package’s dependencies.","code":"z_score_range <- -2:2 gestage_range <- 168:230 ref <- mapply(z_score_range,                FUN = function(z) {                  gigs::zscore2value(z = z,                                     x = gestage_range,                                     sex = \"F\",                                     family = \"ig_nbs\",                                     acronym = \"wfga\")                }) matplot(ref, x = gestage_range, col = 1:5, type = \"l\", lty = 2:6,         xlab = \"Gestational age (days)\",         ylab = \"Weight (kg)\") title(main = \"Weight-for-GA in very preterm newborns\") legend(x = min(gestage_range) + 1, y = ref[length(ref)], legend = 2:-2,        title = \"Z-score\", col = 5:1, lty = 2:6)"},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"other-packages","dir":"","previous_headings":"","what":"Other packages","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"R packages can used analyse growth data international standards, limitations present gigs. also software packages external R implement standards. table describes packages, extent implemented functions let users convert anthropometric measurements z-scores/centiles set standards implemented gigs - Child Growth standards, INTERGROWTH-21st Newborn Size standards (including Preterm), INTERGROWTH-21st Postnatal Growth standards preterm infants. tick (✅) indicates possible standards included package, red cross (❌) indicates standards completely missing, warning sign (⚠️) indicates standards implemented others. benchmarked implementations conversion values z-scores Child Growth Standards different sets INTERGROWTH-21st standards. table shows relative speed software package processing 100,000 inputs. code used generate timings can seen online gigs benchmarking article. Note: zscorer NA couldn’t time 100,000 inputs (takes long). INTERGROWTH-21st standards also available standalone form, available website INTERGROWTH-21st website, respectively. INTERGROWTH-21st website also includes download links Excel-based calculators standards.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"authors--citation","dir":"","previous_headings":"","what":"Authors + Citation","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"S. R. Parker Maternal, Adolescent, Reproductive, Child Health Centre, London School Hygiene & Tropical Medicine Dr L. Vesel Ariadne Labs, Brigham Women’s Hospital Harvard T.H. Chan School Public Health Professor E. O. Ohuma Maternal, Adolescent, Reproductive, Child Health Centre, London School Hygiene & Tropical Medicine","code":""},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"citation","dir":"","previous_headings":"Authors + Citation","what":"Citation","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"Parker S, Vesel L, Ohuma EO (2024). gigs: Assess Fetal, Newborn, Child Growth. https://github.com/lshtm-gigs/gigs/.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Assess Fetal, Newborn, and Child Growth with International Standards","text":"Please note gigs package released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_headsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","title":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","text":"Categorise head circumference--age z-scores head circumference--age strata","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_headsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","text":"","code":"categorise_headsize(hcaz)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_headsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","text":"hcaz numeric vector length one containing head circumference--age z-scores (HCAZs).","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_headsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","text":"object class factor length hcaz, containing head circumference--age classifications. levels c(\"microcephaly_severe\", \"microcephaly\", \"normal_headcirc\", \"macrocephaly\", \"macrocephaly_severe\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_headsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","text":"Cut-offs head size categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_headsize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","text":"Victora CG, Schuler-Faccini L, Matijasevich , Ribeiro E, Pessoa , Barros FC. Microcephaly Brazil: interpret reported numbers? Lancet 2016, 387(10019):621-624 doi:10.1016/S0140-6736(16)00273-7 Accogli , Geraldo AF, Piccolo G, Riva , Scala M, Balagura G, et al. Diagnostic Approach Macrocephaly Children. Frontiers Paediatrics 2022, 9:794069 doi:10.3389/fped.2021.794069","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_headsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorise head circumference-for-age z-scores into head circumference-for-age strata — categorise_headsize","text":"","code":"hcaz <- c(-6.5, -3.5, -2.5, 0, 2.5, 3.5) categorise_headsize(hcaz) #> [1] microcephaly_severe microcephaly_severe microcephaly        #> [4] normal_headcirc     macrocephaly        macrocephaly_severe #> 5 Levels: microcephaly_severe microcephaly normal_headcirc ... macrocephaly_severe"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":"Categorise birthweight centiles size--gestational age strata","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":"","code":"categorise_sfga(p, severe = FALSE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":"p numeric vector birth weight centiles INTERGROWTH-21st Newborn Size standard. elements p 0 1, gigs warn . can customise behaviour GIGS package-level options. severe single logical value specifying whether categorise SGA values third centile \"SGA(<3)\". Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":"object class factor length p, containing size--GA classifications. severe = FALSE, levels c(\"SGA\", \"AGA\", \"LGA\"). severe = TRUE, levels c(\"SGA(<3)\", \"SGA\", \"AGA\", \"LGA\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":"Cut-offs size--gestational age categorisations :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":"Input vectors recycled vctrs::vec_recycle_common(), must adhere vctrs recycling rules.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":". Physical status: use interpretation anthropometry. Report Expert Committee. World Health Organisation Technical Report Series 1995, 854: 1–452 Royal College Obstetricians Gynaecologists. Investigation Management Small--Gestational-Age Fetus: Green-top Guideline . 31. Technical report, Royal College Obstetricians Gynaecologists, London, 2013.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_sfga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorise birthweight centiles into size-for-gestational age strata — categorise_sfga","text":"","code":"p <- c(0.01, 0.07, 0.25, 0.75, 0.93, 0.99) categorise_sfga(p = p, severe = FALSE) #> [1] SGA SGA AGA AGA LGA LGA #> Levels: SGA AGA LGA categorise_sfga(p = p, severe = TRUE) #> [1] SGA(<3) SGA     AGA     AGA     LGA     LGA     #> Levels: SGA(<3) SGA AGA LGA"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"Categorise length/height--age z-scores stunting strata","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"","code":"categorise_stunting(lhaz, outliers = FALSE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"lhaz numeric vector length one containing length/height--age z-scores (LHAZs). outliers single TRUE FALSE value specifying whether implausible z-score thresholds applied. Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"object class factor length longest input vector, containing stunting classifications. levels c(\"stunting_severe\", \"stunting\", \"not_stunting\") outliers = FALSE (default), else c(\"stunting_severe\", \"stunting\", \"not_stunting\", \"outlier\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"Cut-offs stunting categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"function assumes measurements taken according guidelines, stipulate recumbent length measured 730 days. Instead, standing height used. Implausible z-score bounds sourced referenced report, classification cut-offs DHS manual.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_stunting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorise length/height-for-age z-scores into stunting strata — categorise_stunting","text":"","code":"lhaz <- c(-6.5, -5, -3, 0, 3, 5, 6.5) categorise_stunting(lhaz, outliers = FALSE) #> ! Unused factor levels kept after stunting categorisation: \"stunting\". #> [1] stunting_severe stunting_severe stunting_severe not_stunting    #> [5] not_stunting    not_stunting    not_stunting    #> Levels: stunting_severe stunting not_stunting categorise_stunting(lhaz, outliers = TRUE) #> ! Unused factor levels kept after stunting categorisation: \"stunting\". #> [1] outlier         stunting_severe stunting_severe not_stunting    #> [5] not_stunting    not_stunting    outlier         #> Levels: stunting_severe stunting not_stunting outlier"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"Categorise birthweight centiles gestational ages small vulnerable newborn strata","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"","code":"categorise_svn(p, gest_days)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"p numeric vector birth weight centiles INTERGROWTH-21st Newborn Size standard. elements p 0 1, gigs warn . can customise behaviour GIGS package-level options. gest_days numeric vector length one gestational age(s) days. Used determine whether infants term preterm (gestational age > 259 days means infant term).","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"object class factor length longest input vector, containing small vulnerable newborn classifications. levels c(\"Preterm SGA\", \"Preterm AGA\", \"Preterm LGA\", \"Term SGA\", \"Term AGA\", \"Term LGA\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"Cut-offs small, vulnerable newborn categorisations : Abbreviations: SGA, small--gestational age; AGA, appropriate--gestational age; LGA, large--gestational age.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"Input vectors recycled vctrs::vec_recycle_common(), must adhere vctrs recycling rules.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"Lawn JE, Ohuma EO, Bradley E, Idueta LS, Hazel E, Okwaraji YB et al. Small babies, big risks: global estimates prevalence mortality vulnerable newborns accelerate change improve counting. Lancet 2023, 401(10389):1707-1719. doi:10.1016/S0140-6736(23)00522-6","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_svn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorise birthweight centiles and gestational ages into small vulnerable newborn strata — categorise_svn","text":"","code":"p <- c(0.01, 0.07, 0.25, 0.75, 0.93, 0.99) gest_days <- c(250, 250, 250, 280, 280, 280) # 3 preterm, 3 term categorise_svn(p = p, gest_days = gest_days) #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Preterm LGA\" and \"Term SGA\". #> [1] Preterm SGA Preterm SGA Preterm AGA Term AGA    Term LGA    Term LGA    #> Levels: Preterm SGA Preterm AGA Preterm LGA Term SGA Term AGA Term LGA"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"Categorise weight--length/height z-scores wasting strata","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"","code":"categorise_wasting(wlz, outliers = FALSE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"wlz numeric vector length one containing weight--length/height z-scores (WLZs). outliers single TRUE FALSE value specifying whether implausible z-score thresholds applied. Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"object class factor length wlz, containing wasting classifications. levels c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\") outliers = FALSE (default), else c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\", \"outlier\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"Cut-offs wasting categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"function assumes measurements taken according guidelines, stipulate recumbent length measured 730 days. Instead, standing height used. Implausible z-score bounds sourced referenced report, classification cut-offs DHS manual.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wasting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorise weight-for-length/height z-scores into wasting strata — categorise_wasting","text":"","code":"wlz <- c(-5.5, -3, 0, 3, 5.5) categorise_wasting(wlz, outliers = FALSE) #> ! Unused factor levels kept after wasting categorisation: \"wasting\". #> [1] wasting_severe wasting_severe not_wasting    overweight     overweight     #> Levels: wasting_severe wasting not_wasting overweight categorise_wasting(wlz, outliers = TRUE) #> ! Unused factor levels kept after wasting categorisation: \"wasting\". #> [1] outlier        wasting_severe not_wasting    overweight     outlier        #> Levels: wasting_severe wasting not_wasting overweight outlier"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wfa.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","title":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","text":"Categorise weight--age z-scores weight--age strata","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wfa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","text":"","code":"categorise_wfa(waz, outliers = FALSE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wfa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","text":"waz numeric vector length one containing weight--age z-scores (WAZs). outliers single TRUE FALSE value specifying whether implausible z-score thresholds applied. Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wfa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","text":"object class factor length waz, containing weight--age classifications. levels c(\"underweight_severe\", \"underweight\", \"normal\", \"overweight\") outliers = FALSE (default), else c(\"underweight_severe\", \"underweight\", \"normal\", \"overweight\", \"outlier\").  default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wfa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","text":"Cut-offs weight--age categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wfa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/categorise_wfa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorise weight-for-age z-scores into weight-for-age strata — categorise_wfa","text":"","code":"waz <- c(-6.5, -3.5, -2.5, 0, 2.5, 3.5) categorise_wfa(waz, outliers = FALSE) #> [1] underweight_severe underweight_severe underweight        normal_weight      #> [5] overweight         overweight         #> Levels: underweight_severe underweight normal_weight overweight categorise_wfa(waz, outliers = TRUE) #> [1] outlier            underweight_severe underweight        normal_weight      #> [5] overweight         overweight         #> Levels: underweight_severe underweight normal_weight overweight outlier"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","title":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","text":"function permits classification multiple growth indicators (stunting, wasting, weight--age, ) data.frame-like objects.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","text":"","code":"classify_growth(   .data,   gest_days,   age_days,   sex,   weight_kg = NULL,   lenht_cm = NULL,   headcirc_cm = NULL,   id = NULL,   .outcomes = c(\"sfga\", \"svn\", \"stunting\", \"wasting\", \"wfa\", \"headsize\"),   .new = list(sfga = c(\"birthweight_centile\", \"sfga\", \"sfga_severe\"), svn =     c(\"birthweight_centile\", \"svn\"), stunting = c(\"lhaz\", \"stunting\",     \"stunting_outliers\"), wasting = c(\"wlz\", \"wasting\", \"wasting_outliers\"), wfa =     c(\"waz\", \"wfa\", \"wfa_outliers\"), headsize = c(\"hcaz\", \"headsize\")),   .verbose = TRUE )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_growth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","text":".data data.frame-like tabular object one rows. Must permissible checkmate::assert_data_frame(), can also supply tibble, data.table, similar. gest_days <data-masking> name column .data numeric vector gestational age(s) birth days. column, conjunction column referred age_days, used select growth standard use observation. age_days <data-masking> name column .data numeric vector age values days. sex <data-masking> name column .data case-sensitive character vector sexes, either \"M\" (male) \"F\" (female). default, gigs warn elements sex \"M\" \"F\", missing (NA). can customise behaviour using GIGS package-level options. weight_kg <data-masking> name column .data numeric vector weight values kg. performing size--GA small vulnerable newborn classifications, centiles classifications provided measurements taken <12hrs birth, .e. age_days < 0.5. lenht_cm <data-masking> name column .data numeric vector length/height values cm. headcirc_cm <data-masking> name column .data numeric vector head circumference values cm. id <data-masking> name column .data factor variable IDs observation. NULL, variable used ensure first measurement taken infant used birth measure. data one individual, leave parameter NULL. Default = NULL. .outcomes character vector six elements length describing growth outcomes want assess. Use supply data can used generate multiple growth indicators, want run specific set. argument case-sensitive, error thrown supply string .analyses either NA member argument's default. Default = c(\"sfga\", \"svn\", \"stunting\", \"wasting\", \"wfa\", \"headsize\"). .new list names corresponding .analyses, describes names new columns added .data. elements vectors .new equal existing elements colnames(.data), function throw error. Excluding birthweight centiles produced getting size--gestational age (\"sfga\") small vulnerable newborn (\"svn\") classifications, strings .new must unique. character vector .new repaired vctrs::as_names(), issue messages elements .new changed. \"sfga\": c(\"birthweight_centile\", \"sfga\", \"sfga_severe\") \"svn\": c(\"birthweight_centile\", \"svn\") \"stunting\": c(\"lhaz\", \"stunting\", \"stunting_outliers\") \"wasting\": c(\"wlz\", \"wasting\", \"wasting_outliers\") \"wfa\": c(\"waz\", \"wfa\", \"wfa_outliers\") \"headsize\": c(\"hcaz\", \"headsize\") .verbose single logical value. TRUE (default), messages analyses requested versus performed printed console. Warnings classify_growth() still printed even .verbose FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_growth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","text":"tabular object class provided .data, new columns named according .new. new columns depend values supplied .outcomes.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_growth.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","text":"size--GA small vulnerable newborn analyses, centiles categorisations applied birth measurements. considered observation per level id age_days smallest, provided age_days <3. Categorical (factor) columns produced may contain unused factor levels. default, gigs inform columns unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_growth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","text":". Physical status: use interpretation anthropometry. Report Expert Committee. World Health Organisation Technical Report Series 1995, 854: 1–452 Royal College Obstetricians Gynaecologists. Investigation Management Small--Gestational-Age Fetus: Green-top Guideline . 31. Technical report, Royal College Obstetricians Gynaecologists, London, 2013. Lawn JE, Ohuma EO, Bradley E, Idueta LS, Hazel E, Okwaraji YB et al. Small babies, big risks: global estimates prevalence mortality vulnerable newborns accelerate change improve counting. Lancet 2023, 401(10389):1707-1719. doi:10.1016/S0140-6736(23)00522-6 'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm Victora CG, Schuler-Faccini L, Matijasevich , Ribeiro E, Pessoa , Barros FC. Microcephaly Brazil: interpret reported numbers? Lancet 2016, 387(10019):621-624 doi:10.1016/S0140-6736(16)00273-7 Accogli , Geraldo AF, Piccolo G, Riva , Scala M, Balagura G, et al. Diagnostic Approach Macrocephaly Children. Frontiers Paediatrics 2022, 9:794069 doi:10.3389/fped.2021.794069","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_growth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify multiple growth indicators at the same time using GIGS-recommended growth standards — classify_growth","text":"","code":"# This dummy dataset contains data from two people, from birth (<3 days) to # 500 days of age. data <- data.frame(   child = factor(rep.int(c(\"A\", \"B\"), c(3, 3))),   agedays = c(0, 100, 500, 2, 100, 500),   gestage  = c(rep(35 * 7, 3), rep(35 * 7, 3)),   sex = rep.int(c(\"M\", \"F\"), c(3, 3)),   wt_kg = c(3, 6, 9, 3, 6, 9),   len_cm = rep.int(c(52.2, 60.4, 75), 2),   head_cm = rep.int(c(30, 40, 49), 2) )  data_classified <- classify_growth(data,                                    age_days = agedays,                                    gest_days = gestage,                                    weight_kg = wt_kg,                                    lenht_cm = len_cm,                                    headcirc_cm = head_cm,                                    sex = sex,                                    id = child) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after size-for-GA categorisation: \"SGA\". #> ! Unused factor levels kept after size-for-GA categorisation: \"SGA(<3)\" and #> \"SGA\". #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Preterm SGA\", \"Term SGA\", \"Term AGA\", and \"Term LGA\". #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\". #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\" #> and \"outlier\". #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\", #> \"wasting\", and \"overweight\". #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\", #> \"wasting\", \"overweight\", and \"outlier\". #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight_severe\", \"underweight\", and \"overweight\". #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight_severe\", \"underweight\", \"overweight\", and \"outlier\". #> ! Unused factor levels kept after head size categorisation: #> \"microcephaly_severe\", \"microcephaly\", and \"macrocephaly_severe\". #>  #> ── `gigs::classify_growth()` ─────────────────────────────────────────────────── #> ✔ Size-for-gestational age: Success #> ✔ Small vulnerable newborns: Success #> ✔ Stunting: Success #> ✔ Wasting: Success #> ✔ Weight-for-age: Success #> ✔ Head size: Success  data_classified #>   child agedays gestage sex wt_kg len_cm head_cm birthweight_centile sfga #> 1     A       0     245   M     3   52.2      30           0.8893352  AGA #> 2     A     100     245   M     6   60.4      40                  NA <NA> #> 3     A     500     245   M     9   75.0      49                  NA <NA> #> 4     B       2     245   F     3   52.2      30           0.9384734  LGA #> 5     B     100     245   F     6   60.4      40                  NA <NA> #> 6     B     500     245   F     9   75.0      49                  NA <NA> #>   sfga_severe         svn       lhaz     stunting stunting_outliers        wlz #> 1         AGA Preterm AGA  2.8236856 not_stunting      not_stunting         NA #> 2        <NA>        <NA>  0.8876444 not_stunting      not_stunting  1.6408675 #> 3        <NA>        <NA> -2.1690082     stunting          stunting -0.6621871 #> 4         LGA Preterm LGA  3.4154524 not_stunting      not_stunting         NA #> 5        <NA>        <NA>  1.8205012 not_stunting      not_stunting  1.3314150 #> 6        <NA>        <NA> -1.4423063 not_stunting      not_stunting -0.1829182 #>       wasting wasting_outliers        waz           wfa  wfa_outliers #> 1        <NA>             <NA>  1.2230003 normal_weight normal_weight #> 2 not_wasting      not_wasting  0.7413417 normal_weight normal_weight #> 3 not_wasting      not_wasting -1.4866806 normal_weight normal_weight #> 4        <NA>             <NA>  1.5420839 normal_weight normal_weight #> 5 not_wasting      not_wasting  1.4395342 normal_weight normal_weight #> 6 not_wasting      not_wasting -0.7859202 normal_weight normal_weight #>         hcaz        headsize #> 1 -1.5588136 normal_headcirc #> 2  0.9510032 normal_headcirc #> 3  1.4502711 normal_headcirc #> 4 -1.3289704 normal_headcirc #> 5  1.7433668 normal_headcirc #> 6  2.2148421    macrocephaly  # Use `.outcomes` to set which growth indicators will be computed data_svn <- classify_growth(data,                             age_days = agedays,                             gest_days = gestage,                             sex = sex,                             weight_kg = wt_kg,                             id = child,                             .outcomes = \"svn\") #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Preterm SGA\", \"Term SGA\", \"Term AGA\", and \"Term LGA\". #>  #> ── `gigs::classify_growth()` ─────────────────────────────────────────────────── #> ✔ Small vulnerable newborns: Success  data_svn #>   child agedays gestage sex wt_kg len_cm head_cm birthweight_centile #> 1     A       0     245   M     3   52.2      30           0.8893352 #> 2     A     100     245   M     6   60.4      40                  NA #> 3     A     500     245   M     9   75.0      49                  NA #> 4     B       2     245   F     3   52.2      30           0.9384734 #> 5     B     100     245   F     6   60.4      40                  NA #> 6     B     500     245   F     9   75.0      49                  NA #>           svn #> 1 Preterm AGA #> 2        <NA> #> 3        <NA> #> 4 Preterm LGA #> 5        <NA> #> 6        <NA>  # Use `.new` to specify new column names data_svn <- classify_growth(data,                             age_days = agedays,                             gest_days = gestage,                             sex = sex,                             weight_kg = wt_kg,                             id = child,                             .outcomes = \"svn\",                             .new = list(\"svn\" = c(\"ig_nbs_centile\",                                                   \"SVN_Category\"))) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Preterm SGA\", \"Term SGA\", \"Term AGA\", and \"Term LGA\". #>  #> ── `gigs::classify_growth()` ─────────────────────────────────────────────────── #> ✔ Small vulnerable newborns: Success data_svn #>   child agedays gestage sex wt_kg len_cm head_cm ig_nbs_centile SVN_Category #> 1     A       0     245   M     3   52.2      30      0.8893352  Preterm AGA #> 2     A     100     245   M     6   60.4      40             NA         <NA> #> 3     A     500     245   M     9   75.0      49             NA         <NA> #> 4     B       2     245   F     3   52.2      30      0.9384734  Preterm LGA #> 5     B     100     245   F     6   60.4      40             NA         <NA> #> 6     B     500     245   F     9   75.0      49             NA         <NA>  # The function will warn you if you don't provide data for your outcomes data_svn_stunting <- classify_growth(data,                                      age_days = agedays,                                      gest_days = gestage,                                      sex = sex,                                      weight_kg = wt_kg,                                      id = child,                                      .outcomes = c(\"svn\", \"stunting\")) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Preterm SGA\", \"Term SGA\", \"Term AGA\", and \"Term LGA\". #>  #> ── `gigs::classify_growth()` ─────────────────────────────────────────────────── #> ✔ Small vulnerable newborns: Success #> ! Stunting: Not computed (`lenht_cm` not supplied) data_svn_stunting #>   child agedays gestage sex wt_kg len_cm head_cm birthweight_centile #> 1     A       0     245   M     3   52.2      30           0.8893352 #> 2     A     100     245   M     6   60.4      40                  NA #> 3     A     500     245   M     9   75.0      49                  NA #> 4     B       2     245   F     3   52.2      30           0.9384734 #> 5     B     100     245   F     6   60.4      40                  NA #> 6     B     500     245   F     9   75.0      49                  NA #>           svn #> 1 Preterm AGA #> 2        <NA> #> 3        <NA> #> 4 Preterm LGA #> 5        <NA> #> 6        <NA>"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":"Classify head size data.frame-like objects GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":"","code":"classify_headsize(   .data,   headcirc_cm,   age_days,   gest_days,   sex,   id = NULL,   .new = c(\"hcaz\", \"headsize\") )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":".data data.frame-like tabular object one rows. Must permissible checkmate::assert_data_frame(), can also supply tibble, data.table, similar. headcirc_cm <data-masking> name column .data numeric vector head circumference values cm. age_days <data-masking> name column .data numeric vector age values days. gest_days <data-masking> name column .data numeric vector gestational age(s) birth days. column, conjunction column referred age_days, used select growth standard use observation. sex <data-masking> name column .data case-sensitive character vector sexes, either \"M\" (male) \"F\" (female). default, gigs warn elements sex \"M\" \"F\", missing (NA). can customise behaviour using GIGS package-level options. id <data-masking> name column .data factor variable IDs observation. NULL, variable used ensure first measurement taken infant used birth measure. data one individual, leave parameter NULL. Default = NULL. .new three-length character vector names output columns. inputs repaired necessary using vctrs::vec_as_names(), print changes console. elements .new elements colnames(.data), function throw error. Default = c(\"hcaz\", \"headsize\").","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":"tabular object class provided .data, three new columns named according .new. columns (left right): hcaz - Numeric vector weight--length/height zscores headsize - Factor head size categories","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":"Cut-offs head size categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":"Categorical (factor) columns produced may contain unused factor levels. default, gigs inform columns unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":"Victora CG, Schuler-Faccini L, Matijasevich , Ribeiro E, Pessoa , Barros FC. Microcephaly Brazil: interpret reported numbers? Lancet 2016, 387(10019):621-624 doi:10.1016/S0140-6736(16)00273-7 Accogli , Geraldo AF, Piccolo G, Riva , Scala M, Balagura G, et al. Diagnostic Approach Macrocephaly Children. Frontiers Paediatrics 2022, 9:794069 doi:10.3389/fped.2021.794069","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_headsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify head size in data.frame-like objects with GIGS-recommended growth standards — classify_headsize","text":"","code":"# This dummy dataset contains data from two people, from birth (<3 days) to # 500 days of age. data <- data.frame(   child = factor(rep.int(c(\"A\", \"B\"), c(3, 3))),   agedays = c(0, 100, 500, 2, 100, 500),   gestage  = c(rep(35 * 7, 3), rep(35 * 7, 3)),   sex = rep.int(c(\"M\", \"F\"), c(3, 3)),   headcirc_cm = rep.int(c(40, 50, 60), 2) )  # Use the `id` argument to ensure that `classify_headsize()` uses the correct # standard for each observation data |>   classify_headsize(headcirc_cm = headcirc_cm,                     age_days = agedays,                     gest_days = gestage,                     sex = sex,                     id = child) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after head size categorisation: #> \"microcephaly_severe\", \"microcephaly\", \"normal_headcirc\", and \"macrocephaly\". #>   child agedays gestage sex headcirc_cm      hcaz            headsize #> 1     A       0     245   M          40  4.759628 macrocephaly_severe #> 2     A     100     245   M          50 10.907943 macrocephaly_severe #> 3     A     500     245   M          60  9.804805 macrocephaly_severe #> 4     B       2     245   F          40  4.807734 macrocephaly_severe #> 5     B     100     245   F          50 11.700306 macrocephaly_severe #> 6     B     500     245   F          60 10.202535 macrocephaly_severe  # If you don't specify `id`, `classify_headsize()` will assume data is from # one child only data |>   classify_headsize(headcirc_cm = headcirc_cm,                     age_days = agedays,                     gest_days = gestage,                     sex = sex) #> ! Unused factor levels kept after head size categorisation: #> \"microcephaly_severe\", \"microcephaly\", \"normal_headcirc\", and \"macrocephaly\". #>   child agedays gestage sex headcirc_cm      hcaz            headsize #> 1     A       0     245   M          40  4.759628 macrocephaly_severe #> 2     A     100     245   M          50 10.907943 macrocephaly_severe #> 3     A     500     245   M          60  9.804805 macrocephaly_severe #> 4     B       2     245   F          40  7.961152 macrocephaly_severe #> 5     B     100     245   F          50 11.700306 macrocephaly_severe #> 6     B     500     245   F          60 10.202535 macrocephaly_severe"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":"Classify size--gestational age data.frame-like objects INTERGROWTH-21st weight--gestational age standard","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":"","code":"classify_sfga(   .data,   weight_kg,   gest_days,   sex,   .new = c(\"birthweight_centile\", \"sfga\", \"sfga_severe\") )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":".data data.frame-like tabular object one rows. Must permissible checkmate::assert_data_frame(), can also supply tibble, data.table, similar. weight_kg <data-masking> name column .data numeric vector birth weight values kg. assumed weight measurements provided function birth weights recorded <12 hours infant's birth. gest_days <data-masking> name column .data numeric vector gestational age(s) birth days 168 300. default, gigs warn elements vector outside bounds, NA, Inf. can customise behaviour using GIGS package-level options. sex <data-masking> name column .data case-sensitive character vector sexes, either \"M\" (male) \"F\" (female). default, gigs warn elements sex \"M\" \"F\", missing (NA). can customise behaviour using GIGS package-level options. .new three-length character vector names output columns. inputs repaired necessary using vctrs::vec_as_names(), print changes console. elements .new elements colnames(.data), function throw error. Default = c(\"birthweight_centile\", \"sfga\", \"sfga_severe\").","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":"tabular object class provided .data, three new columns named according .new. columns (left right): birthweight_centile - Numeric vector birthweight centiles INTERGROWTH-21st Newborn Size standard weight--GA sfga - Factor size--GA categories without severe small--GA classification sfga_severe - Factor size--GA categories severe small--GA classification","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":"Cut-offs size--gestational age categorisations :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":"Categorical (factor) columns produced may contain unused factor levels. default, gigs inform columns unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":". Physical status: use interpretation anthropometry. Report Expert Committee. World Health Organisation Technical Report Series 1995, 854: 1–452 Royal College Obstetricians Gynaecologists. Investigation Management Small--Gestational-Age Fetus: Green-top Guideline . 31. Technical report, Royal College Obstetricians Gynaecologists, London, 2013.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_sfga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify size-for-gestational age in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_sfga","text":"","code":"data <- data.frame(  wt_kg = c(2.2, 2.5, 3.3, 4.0),  gestage = 266:269,  sex = c(\"F\", \"M\", \"F\", \"M\") )  data |>   classify_sfga(weight_kg = wt_kg,                 gest_days = gestage,                 sex = sex) #>   wt_kg gestage sex birthweight_centile sfga sfga_severe #> 1   2.2     266   F          0.01890983  SGA     SGA(<3) #> 2   2.5     267   M          0.06485308  SGA         SGA #> 3   3.3     268   F          0.75655402  AGA         AGA #> 4   4.0     269   M          0.97108564  LGA         LGA"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":"Classify stunting data.frame-like objects GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":"","code":"classify_stunting(   .data,   lenht_cm,   age_days,   gest_days,   sex,   id = NULL,   .new = c(\"lhaz\", \"stunting\", \"stunting_outliers\") )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":".data data.frame-like tabular object one rows. Must permissible checkmate::assert_data_frame(), can also supply tibble, data.table, similar. lenht_cm <data-masking> name column .data numeric vector length/height values cm. age_days <data-masking> name column .data numeric vector age values days. gest_days <data-masking> name column .data numeric vector gestational age(s) birth days. column, conjunction column referred age_days, used select growth standard use observation. sex <data-masking> name column .data case-sensitive character vector sexes, either \"M\" (male) \"F\" (female). default, gigs warn elements sex \"M\" \"F\", missing (NA). can customise behaviour using GIGS package-level options. id <data-masking> name column .data factor variable IDs observation. NULL, variable used ensure first measurement taken infant used birth measure. data one individual, leave parameter NULL. Default = NULL. .new three-length character vector names output columns. inputs repaired necessary using vctrs::vec_as_names(), print changes console. elements .new elements colnames(.data), function throw error. Default = c(\"lhaz\", \"stunting\", \"stunting_outliers\").","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":"tabular object class provided .data, three new columns named according .new. columns (left right): lhaz - Numeric vector length/height--age zscores stunting - Factor stunting categories without outlier flagging stunting_outliers - Factor stunting categories outlier flagging","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":"Cut-offs stunting categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":"Categorical (factor) columns produced may contain unused factor levels. default, gigs inform columns unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_stunting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify stunting in data.frame-like objects with GIGS-recommended growth standards — classify_stunting","text":"","code":"# This dummy dataset contains data from two people, from birth (<3 days) to # 500 days of age. data <- data.frame(   child = factor(rep.int(c(\"A\", \"B\"), c(3, 3))),   agedays = c(0, 100, 500, 2, 100, 500),   gestage  = c(rep(35 * 7, 3), rep(40 * 7, 3)),   sex = rep.int(c(\"M\", \"F\"), c(3, 3)),   length_cm = rep.int(c(52.2, 60.4, 75), 2) )  # Use the `id` argument to ensure that `classify_stunting` uses the correct # standard for each observation data |>   classify_stunting(lenht_cm = length_cm,                     age_days = agedays,                     gest_days = gestage,                     sex = sex,                     id = child) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\". #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\" #> and \"outlier\". #>   child agedays gestage sex length_cm        lhaz     stunting #> 1     A       0     245   M      52.2  2.82368563 not_stunting #> 2     A     100     245   M      60.4  0.88764438 not_stunting #> 3     A     500     245   M      75.0 -2.16900825     stunting #> 4     B       2     280   F      52.2  1.86816342 not_stunting #> 5     B     100     280   F      60.4 -0.04512913 not_stunting #> 6     B     500     280   F      75.0 -1.44230628 not_stunting #>   stunting_outliers #> 1      not_stunting #> 2      not_stunting #> 3          stunting #> 4      not_stunting #> 5      not_stunting #> 6      not_stunting  # If you don't specify `id`, `classify_stunting` will assume data is from one # child only data |>   classify_stunting(lenht_cm = length_cm,                     age_days = agedays,                     gest_days = gestage,                     sex = sex) #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\". #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\" #> and \"outlier\". #>   child agedays gestage sex length_cm        lhaz     stunting #> 1     A       0     245   M      52.2  2.82368563 not_stunting #> 2     A     100     245   M      60.4  0.88764438 not_stunting #> 3     A     500     245   M      75.0 -2.16900825     stunting #> 4     B       2     280   F      52.2  1.45276970 not_stunting #> 5     B     100     280   F      60.4 -0.04512913 not_stunting #> 6     B     500     280   F      75.0 -1.44230628 not_stunting #>   stunting_outliers #> 1      not_stunting #> 2      not_stunting #> 3          stunting #> 4      not_stunting #> 5      not_stunting #> 6      not_stunting"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":"Classify small vulnerable newborns data.frame-like objects INTERGROWTH-21st weight--gestational age standard","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":"","code":"classify_svn(   .data,   weight_kg,   gest_days,   sex,   .new = c(\"birthweight_centile\", \"svn\") )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":".data data.frame-like tabular object one rows. Must permissible checkmate::assert_data_frame(), can also supply tibble, data.table, similar. weight_kg <data-masking> name column .data numeric vector birth weight values kg. assumed weight measurements provided function birth weights recorded <12 hours infant's birth. gest_days <data-masking> name column .data numeric vector gestational age(s) birth days 168 300. default, gigs warn elements vector outside bounds, NA, Inf. can customise behaviour using GIGS package-level options. sex <data-masking> name column .data case-sensitive character vector sexes, either \"M\" (male) \"F\" (female). default, gigs warn elements sex \"M\" \"F\", missing (NA). can customise behaviour using GIGS package-level options. .new two-length character vector names output columns. inputs repaired necessary using vctrs::vec_as_names(), print changes console. elements .new elements colnames(.data), function throw error. Default = c(\"birthweight_centile\", \"svn\").","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":"tabular object class provided .data, two new columns named according .new. columns (left right): birthweight_centile - Numeric vector birthweight centiles INTERGROWTH-21st Newborn Size standard weight--GA svn - Factor small vulnerable newborn (SVN) categories","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":"Cut-offs small, vulnerable newborn categorisations : Abbreviations: SGA, small--gestational age; AGA, appropriate--gestational age; LGA, large--gestational age.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":"Categorical (factor) columns produced may contain unused factor levels. default, gigs inform columns unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":". Physical status: use interpretation anthropometry. Report Expert Committee. World Health Organisation Technical Report Series 1995, 854: 1–452 Royal College Obstetricians Gynaecologists. Investigation Management Small--Gestational-Age Fetus: Green-top Guideline . 31. Technical report, Royal College Obstetricians Gynaecologists, London, 2013.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_svn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify small vulnerable newborns in data.frame-like objects with the INTERGROWTH-21st weight-for-gestational age standard — classify_svn","text":"","code":"data <- data.frame(   wt_kg = c(1.5, 2.6, 2.6, 3.5),   gestage = c(235, 257, 275, 295),   sex = c(\"F\", \"M\", \"F\", \"M\") )  data |>   classify_svn(weight_kg = wt_kg,                gest_days = gestage,                sex = sex) #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Preterm LGA\" and \"Term LGA\". #>   wt_kg gestage sex birthweight_centile         svn #> 1   1.5     235   F          0.07039106 Preterm SGA #> 2   2.6     257   M          0.27470460 Preterm AGA #> 3   2.6     275   F          0.06389942    Term SGA #> 4   3.5     295   M          0.36209260    Term AGA"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":"Classify wasting data.frame-like objects GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":"","code":"classify_wasting(   .data,   weight_kg,   lenht_cm,   age_days,   gest_days,   sex,   id = NULL,   .new = c(\"wlz\", \"wasting\", \"wasting_outliers\") )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":".data data.frame-like tabular object one rows. Must permissible checkmate::assert_data_frame(), can also supply tibble, data.table, similar. weight_kg <data-masking> name column .data numeric vector birth weight values kg. assumed weight measurements provided function birth weights recorded <12 hours infant's birth. lenht_cm <data-masking> name column .data numeric vector length/height values cm. age_days <data-masking> name column .data numeric vector age values days. gest_days <data-masking> name column .data numeric vector gestational age(s) birth days. column, conjunction column referred age_days, used select growth standard use observation. sex <data-masking> name column .data case-sensitive character vector sexes, either \"M\" (male) \"F\" (female). default, gigs warn elements sex \"M\" \"F\", missing (NA). can customise behaviour using GIGS package-level options. id <data-masking> name column .data factor variable IDs observation. NULL, variable used ensure first measurement taken infant used birth measure. data one individual, leave parameter NULL. Default = NULL. .new three-length character vector names output columns. inputs repaired necessary using vctrs::vec_as_names(), print changes console. elements .new elements colnames(.data), function throw error. Default = c(\"wlz\", \"wasting\", \"wasting_outliers\").","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":"tabular object class provided .data, three new columns named according .new. columns (left right): wlz - Numeric vector weight--length/height zscores wasting - Factor wasting categories without outlier flagging wasting_outliers - Factor wasting categories outlier flagging","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":"Cut-offs wasting categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":"Categorical (factor) columns produced may contain unused factor levels. default, gigs inform columns unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wasting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify wasting in data.frame-like objects with GIGS-recommended growth standards — classify_wasting","text":"","code":"# This dummy dataset contains data from two people, from birth (<3 days) to # 500 days of age. data <- data.frame(   child = factor(rep.int(c(\"A\", \"B\"), c(3, 3))),   agedays = c(0, 100, 500, 2, 100, 500),   gestage  = c(rep(35 * 7, 3), rep(35 * 7, 3)),   sex = rep.int(c(\"M\", \"F\"), c(3, 3)),   weight_kg = c(3, 6, 9, 3, 6, 9),   length_cm = rep.int(c(52.2, 60.4, 75), 2) )  # Use the `id` argument to ensure that `classify_wasting` uses the correct # standard for each observation data |>   classify_wasting(weight_kg = weight_kg,                    lenht_cm = length_cm,                    age_days = agedays,                    gest_days = gestage,                    sex = sex,                    id = child) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\", #> \"wasting\", and \"overweight\". #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\", #> \"wasting\", \"overweight\", and \"outlier\". #>   child agedays gestage sex weight_kg length_cm        wlz     wasting #> 1     A       0     245   M         3      52.2         NA        <NA> #> 2     A     100     245   M         6      60.4  1.6408675 not_wasting #> 3     A     500     245   M         9      75.0 -0.6621871 not_wasting #> 4     B       2     245   F         3      52.2         NA        <NA> #> 5     B     100     245   F         6      60.4  1.3314150 not_wasting #> 6     B     500     245   F         9      75.0 -0.1829182 not_wasting #>   wasting_outliers #> 1             <NA> #> 2      not_wasting #> 3      not_wasting #> 4             <NA> #> 5      not_wasting #> 6      not_wasting  # If you don't specify `id`, `classify_wasting` will assume data is from one # child only data |>   classify_wasting(weight_kg = weight_kg,                    lenht_cm = length_cm,                    age_days = agedays,                    gest_days = gestage,                    sex = sex) #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\" and #> \"overweight\". #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\", #> \"overweight\", and \"outlier\". #>   child agedays gestage sex weight_kg length_cm        wlz     wasting #> 1     A       0     245   M         3      52.2         NA        <NA> #> 2     A     100     245   M         6      60.4  1.6408675 not_wasting #> 3     A     500     245   M         9      75.0 -0.6621871 not_wasting #> 4     B       2     245   F         3      52.2 -2.3716265     wasting #> 5     B     100     245   F         6      60.4  1.3314150 not_wasting #> 6     B     500     245   F         9      75.0 -0.1829182 not_wasting #>   wasting_outliers #> 1             <NA> #> 2      not_wasting #> 3      not_wasting #> 4          wasting #> 5      not_wasting #> 6      not_wasting"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":"Classify weight--age data.frame-like objects GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":"","code":"classify_wfa(   .data,   weight_kg,   age_days,   gest_days,   sex,   id = NULL,   .new = c(\"waz\", \"wfa\", \"wfa_outliers\") )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":".data data.frame-like tabular object one rows. Must permissible checkmate::assert_data_frame(), can also supply tibble, data.table, similar. weight_kg <data-masking> name column .data numeric vector birth weight values kg. assumed weight measurements provided function birth weights recorded <12 hours infant's birth. age_days <data-masking> name column .data numeric vector age values days. gest_days <data-masking> name column .data numeric vector gestational age(s) birth days. column, conjunction column referred age_days, used select growth standard use observation. sex <data-masking> name column .data case-sensitive character vector sexes, either \"M\" (male) \"F\" (female). default, gigs warn elements sex \"M\" \"F\", missing (NA). can customise behaviour using GIGS package-level options. id <data-masking> name column .data factor variable IDs observation. NULL, variable used ensure first measurement taken infant used birth measure. data one individual, leave parameter NULL. Default = NULL. .new three-length character vector names output columns. inputs repaired necessary using vctrs::vec_as_names(), print changes console. elements .new elements colnames(.data), function throw error. Default = c(\"waz\", \"wfa\", \"wfa_outliers\").","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":"tabular object class provided .data, three new columns named according .new. columns (left right): wlz - Numeric vector weight--length/height zscores wfa - Factor weight--age categories without outlier flagging wfa_outliers - Factor weight--age categories outlier flagging","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":"Cut-offs weight--age categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":"Categorical (factor) columns produced may contain unused factor levels. default, gigs inform columns unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/classify_wfa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify weight-for-age in data.frame-like objects with GIGS-recommended growth standards — classify_wfa","text":"","code":"# This dummy dataset contains data from two people, from birth (<3 days) to # 500 days of age. data <- data.frame(   child = factor(rep.int(c(\"A\", \"B\"), c(3, 3))),   agedays = c(0, 100, 500, 2, 100, 500),   gestage  = c(rep(35 * 7, 3), rep(35 * 7, 3)),   sex = rep.int(c(\"M\", \"F\"), c(3, 3)),   weight_kg = c(3, 6, 9, 3, 6, 9) )  # Use the `id` argument to ensure that `classify_wfa()` uses the correct # standard for each observation data |>   classify_wfa(weight_kg = weight_kg,                age_days = agedays,                gest_days = gestage,                sex = sex,                id = child) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight_severe\", \"underweight\", and \"overweight\". #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight_severe\", \"underweight\", \"overweight\", and \"outlier\". #>   child agedays gestage sex weight_kg        waz           wfa  wfa_outliers #> 1     A       0     245   M         3  1.2230003 normal_weight normal_weight #> 2     A     100     245   M         6  0.7413417 normal_weight normal_weight #> 3     A     500     245   M         9 -1.4866806 normal_weight normal_weight #> 4     B       2     245   F         3  1.5420839 normal_weight normal_weight #> 5     B     100     245   F         6  1.4395342 normal_weight normal_weight #> 6     B     500     245   F         9 -0.7859202 normal_weight normal_weight  # If you don't specify `id`, `classify_wfa()` will assume data is from one # child only data |>   classify_wfa(weight_kg = weight_kg,                age_days = agedays,                gest_days = gestage,                sex = sex) #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight_severe\" and \"underweight\". #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight_severe\", \"underweight\", and \"outlier\". #>   child agedays gestage sex weight_kg        waz           wfa  wfa_outliers #> 1     A       0     245   M         3  1.2230003 normal_weight normal_weight #> 2     A     100     245   M         6  0.7413417 normal_weight normal_weight #> 3     A     500     245   M         9 -1.4866806 normal_weight normal_weight #> 4     B       2     245   F         3  2.2572938    overweight    overweight #> 5     B     100     245   F         6  1.4395342 normal_weight normal_weight #> 6     B     500     245   F         9 -0.7859202 normal_weight normal_weight"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_headsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","title":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","text":"Get head size categories using multiple vectors GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_headsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","text":"","code":"compute_headsize(headcirc_cm, age_days, gest_days, sex, id = NULL)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_headsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","text":"headcirc_cm Numeric vector length one head circumference measurement(s) cm. age_days Numeric vector length one age(s) days child. 0 1856 days. default, gigs replace --bounds elements age_days NA warn . behaviour can customised using functions gigs_options. gest_days Numeric vector gestational age(s) birth days. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options. id factor length one ID observation, either ordered unordered, containing missing (NA) values. supplied, id used ensure earliest measurement individual used birth measure. Leave argument NULL data comes individual. Default = NULL.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_headsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","text":"object class factor length wlz, containing wasting classifications. levels c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\") outliers = FALSE (default), else c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\", \"outlier\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_headsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","text":"Cut-offs head size categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_headsize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_headsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get head size categories using multiple vectors and GIGS-recommended growth standards — compute_headsize","text":"","code":"# The first observation for each infant in `id` uses the INTERGROWTH-21st #  Newborn Size standards; the next two use either the INTERGROWTH-21st # Postnatal Growth standards or WHO Child Growth Standards. compute_headsize(   headcirc_cm = c(31.6, 40, 50, 31.6, 40, 50),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"),   id = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\")) ) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after head size categorisation: #> \"microcephaly_severe\", \"microcephaly\", and \"macrocephaly_severe\". #> [1] normal_headcirc normal_headcirc macrocephaly    normal_headcirc #> [5] normal_headcirc macrocephaly    #> 5 Levels: microcephaly_severe microcephaly normal_headcirc ... macrocephaly_severe  # If you don't specify `id`, the function will not identify that the fourth # data point is a birth measurement, and will categorise it as microcephalic # instead of normal compute_headsize(   headcirc_cm = c(31.6, 40, 50, 31.6, 40, 50),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\") ) #> ! Unused factor levels kept after head size categorisation: #> \"microcephaly_severe\" and \"macrocephaly_severe\". #> [1] normal_headcirc normal_headcirc macrocephaly    microcephaly    #> [5] normal_headcirc macrocephaly    #> 5 Levels: microcephaly_severe microcephaly normal_headcirc ... macrocephaly_severe"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":null,"dir":"Reference","previous_headings":"","what":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":"Get size--gestational age categories using multiple vectors INTERGROWTH-21st weight--gestational age standard","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":"","code":"compute_sfga(weight_kg, gest_days, sex, severe = FALSE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":"weight_kg Numeric vector length one weight value(s) kg. assumed weight measurements provided function birth weights recorded <12 hours infant's birth. gest_days Numeric vector length one gestational ages days. Classifications can computed gest_days 168 300, limits INTERGROWTH-21st Newborn Size standards (including Preterm standards). default, gigs warn elements gest_days either outside bounds, NA, Inf. can customise behaviour using GIGS package-level options. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options. severe single logical value specifying whether categorise SGA values third centile (0.03) \"SGA(<3)\". Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":"object class factor length longest input vector, containing size--GA classifications. severe = FALSE, levels c(\"SGA\", \"AGA\", \"LGA\"). severe = TRUE, levels c(\"SGA(<3)\", \"SGA\", \"AGA\", \"LGA\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":"Cut-offs size--gestational age categorisations :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":"Input vectors recycled vctrs::vec_recycle_common(), must adhere vctrs recycling rules.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":". Physical status: use interpretation anthropometry. Report Expert Committee. World Health Organisation Technical Report Series 1995, 854: 1–452 Royal College Obstetricians Gynaecologists. Investigation Management Small--Gestational-Age Fetus: Green-top Guideline . 31. Technical report, Royal College Obstetricians Gynaecologists, London, 2013.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_sfga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get size-for-gestational age categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_sfga","text":"","code":"# By default, does not differentiate between p < 0.03 and p < 0.10 compute_sfga(   weight_kg = c(2.2, 2.5, 3.3, 4.0),   gest_days = 266:269,   sex = c(\"F\", \"M\", \"F\", \"M\") ) #> [1] SGA SGA AGA LGA #> Levels: SGA AGA LGA  # With severe = TRUE, highlights p < 0.03 compute_sfga(   weight_kg = c(2.2, 2.5, 3.3, 4.0),   gest_days = 266:269,   sex = c(\"F\", \"M\", \"F\", \"M\"),   severe = TRUE ) #> [1] SGA(<3) SGA     AGA     LGA     #> Levels: SGA(<3) SGA AGA LGA"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":null,"dir":"Reference","previous_headings":"","what":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"Get stunting categories using multiple vectors GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"","code":"compute_stunting(   lenht_cm,   age_days,   gest_days,   sex,   id = NULL,   outliers = FALSE )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"lenht_cm Numeric vector length one length/height measurement(s) cm. age_days Numeric vector length one age(s) days child. 0 1856 days. default, gigs replace --bounds elements age_days NA warn . behaviour can customised using functions gigs_options. gest_days Numeric vector gestational age(s) birth days. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options. id factor length one ID observation, either ordered unordered, containing missing (NA) values. supplied, id used ensure earliest measurement individual used birth measure. Leave argument NULL data comes individual. Default = NULL. outliers single TRUE FALSE value specifying whether implausible z-score thresholds applied. Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"object class factor length longest input vector, containing stunting classifications. levels c(\"stunting_severe\", \"stunting\", \"not_stunting\") outliers = FALSE (default), else c(\"stunting_severe\", \"stunting\", \"not_stunting\", \"outlier\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"Cut-offs stunting categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"function assumes measurements taken according guidelines, stipulate recumbent length measured 730 days. Instead, standing height used. Implausible z-score bounds sourced referenced report, classification cut-offs DHS manual.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_stunting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get stunting categories using multiple vectors and GIGS-recommended growth standards — compute_stunting","text":"","code":"# The first observation for each infant in `id` uses the INTERGROWTH-21st #  Newborn Size standards; the next two use either the INTERGROWTH-21st # Postnatal Growth standards or WHO Child Growth Standards. compute_stunting(   lenht_cm = c(52.2, 60.4, 75, 52.2, 60.4, 75),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"),   id = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\")) ) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\". #> [1] not_stunting not_stunting stunting     not_stunting not_stunting #> [6] not_stunting #> Levels: stunting_severe stunting not_stunting  # With outlier flagging: compute_stunting(   lenht_cm = c(52.2, 75.4, 63.1),   age_days = c(357, 375, 250),   gest_days = c(196, 287, 266),   sex = c(\"M\", \"M\", \"F\"),   id = factor(c(\"A\", \"B\", \"C\")),   outliers = TRUE ) #> ! Unused factor levels kept after stunting categorisation: \"stunting_severe\". #> [1] outlier      not_stunting stunting     #> Levels: stunting_severe stunting not_stunting outlier  # If you don't specify `id`, the function will not identify that the fourth # data point is a birth measurement, and will categorise it as severe # stunting instead of not stunting compute_stunting(   lenht_cm = c(40.0, 60.4, 75, 40.0, 60.4, 75),   age_days = c(0.45, 100, 500, 0.5, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\") ) #> [1] stunting        not_stunting    stunting        stunting_severe #> [5] not_stunting    not_stunting    #> Levels: stunting_severe stunting not_stunting"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"Get small vulnerable newborn categories using multiple vectors INTERGROWTH-21st weight--gestational age standard","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"","code":"compute_svn(weight_kg, gest_days, sex)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"weight_kg Numeric vector length one weight value(s) kg. assumed weight measurements provided function birth weights recorded <12 hours infant's birth. gest_days Numeric vector length one gestational ages days. Classifications can computed gest_days 168 300, limits INTERGROWTH-21st Newborn Size standards (including Preterm standards). default, gigs warn elements gest_days either outside bounds, NA, Inf. can customise behaviour using GIGS package-level options. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"object class factor length longest input vector, containing small vulnerable newborn classifications. levels c(\"Preterm SGA\", \"Preterm AGA\", \"Preterm LGA\", \"Term SGA\", \"Term AGA\", \"Term LGA\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"Cut-offs small, vulnerable newborn categorisations : Abbreviations: SGA, small--gestational age; AGA, appropriate--gestational age; LGA, large--gestational age.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"Input vectors recycled vctrs::vec_recycle_common(), must adhere vctrs recycling rules.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"Lawn JE, Ohuma EO, Bradley E, Idueta LS, Hazel E, Okwaraji YB et al. Small babies, big risks: global estimates prevalence mortality vulnerable newborns accelerate change improve counting. Lancet 2023, 401(10389):1707-1719. doi:10.1016/S0140-6736(23)00522-6","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_svn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get small vulnerable newborn categories using multiple vectors and the INTERGROWTH-21st weight-for-gestational age standard — compute_svn","text":"","code":"compute_svn(   weight_kg = c(1.5, 2.6, 2.6, 3.5),   gest_days = c(235, 257, 275, 295),   sex = c(\"F\", \"M\", \"F\", \"M\") ) #> ! Unused factor levels kept after small vulnerable newborn categorisation: #> \"Preterm LGA\" and \"Term LGA\". #> [1] Preterm SGA Preterm AGA Term SGA    Term AGA    #> Levels: Preterm SGA Preterm AGA Preterm LGA Term SGA Term AGA Term LGA"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":null,"dir":"Reference","previous_headings":"","what":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"Get wasting categories using multiple vectors GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"","code":"compute_wasting(   weight_kg,   lenht_cm,   age_days,   gest_days,   sex,   id = NULL,   outliers = FALSE )"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"weight_kg Numeric vector length one weight measurement(s) kg. lenht_cm Numeric vector length one length/height measurement(s) cm. age_days Numeric vector length one age(s) days child. 0 1856 days. default, gigs replace --bounds elements age_days NA warn . behaviour can customised using functions gigs_options. gest_days Numeric vector gestational age(s) birth days. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options. id factor length one ID observation, either ordered unordered, containing missing (NA) values. supplied, id used ensure earliest measurement individual used birth measure. Leave argument NULL data comes individual. Default = NULL. outliers single TRUE FALSE value specifying whether implausible z-score thresholds applied. Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"object class factor length wlz, containing wasting classifications. levels c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\") outliers = FALSE (default), else c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\", \"outlier\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"Cut-offs wasting categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"function assumes measurements taken according guidelines, stipulate recumbent length measured 730 days. Instead, standing height used. Implausible z-score bounds sourced referenced report, classification cut-offs DHS manual.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wasting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get wasting categories using multiple vectors and GIGS-recommended growth standards — compute_wasting","text":"","code":"# The first observation for each infant in `id` uses the INTERGROWTH-21st #  Newborn Size standards; the next two use either the INTERGROWTH-21st # Postnatal Growth standards or WHO Child Growth Standards. compute_wasting(   weight_kg = c(3, 6, 11, 3, 6, 11),   lenht_cm = c(52.2, 60.4, 61, 52.2, 60.4, 61),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"),   id = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\")) ) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\" and #> \"wasting\". #> [1] <NA>        not_wasting overweight  <NA>        not_wasting overweight  #> Levels: wasting_severe wasting not_wasting overweight  # With outlier flagging: compute_wasting(   weight_kg = c(3, 6, 11, 3, 6, 11),   lenht_cm = c(52.2, 60.4, 61, 52.2, 60.4, 61),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"),   id = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\")),   outliers = TRUE ) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\", #> \"wasting\", and \"overweight\". #> [1] <NA>        not_wasting outlier     <NA>        not_wasting outlier     #> Levels: wasting_severe wasting not_wasting overweight outlier  # If you don't specify `id`, the function will not identify that the fourth # data point is a birth measurement. This means a weight-for-length z-score # (and resulting wasting classification) will be calculated for the fourth # data point, which is wrong here compute_wasting(   weight_kg = c(3, 6, 11, 3, 6, 11),   lenht_cm = c(52.2, 60.4, 61, 52.2, 60.4, 61),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\") ) #> ! Unused factor levels kept after wasting categorisation: \"wasting_severe\". #> [1] <NA>        not_wasting overweight  wasting     not_wasting overweight  #> Levels: wasting_severe wasting not_wasting overweight"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"Get weight--age categories using multiple vectors GIGS-recommended growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"","code":"compute_wfa(weight_kg, age_days, gest_days, sex, id = NULL, outliers = FALSE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"weight_kg Numeric vector length one weight measurement(s) kg. age_days Numeric vector length one age(s) days child. 0 1856 days. default, gigs replace --bounds elements age_days NA warn . behaviour can customised using functions gigs_options. gest_days Numeric vector gestational age(s) birth days. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options. id factor length one ID observation, either ordered unordered, containing missing (NA) values. supplied, id used ensure earliest measurement individual used birth measure. Leave argument NULL data comes individual. Default = NULL. outliers single TRUE FALSE value specifying whether implausible z-score thresholds applied. Default = FALSE.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"object class factor length wlz, containing wasting classifications. levels c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\") outliers = FALSE (default), else c(\"wasting_severe\", \"wasting\", \"not_wasting\", \"overweight\", \"outlier\"). default, gigs inform object contains unused factor levels. can change behaviour using GIGS package-level option .gigs_options$handle_unused_levels.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"Cut-offs weight--age categories :","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"function assumes measurements taken according guidelines, stipulate recumbent length measured 730 days. Instead, standing height used. Implausible z-score bounds sourced referenced report, classification cut-offs DHS manual.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"'Implausible z-score values' World Health Organization (ed.) Recommendations data collection, analysis reporting anthropometric indicators children 5 years old. Geneva: World Health Organization United Nations Children's Fund UNICEF, (2019). pp. 64-65. 'Percentage children stunted, wasted, underweight, mean z-scores stunting, wasting underweight' Guide DHS Statistics DHS-7 Rockville, Maryland, USA: ICF (2020). pp. 431-435. https://dhsprogram.com/data/Guide--DHS-Statistics/Nutritional_Status.htm","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/compute_wfa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get weight-for-age categories using multiple vectors and GIGS-recommended growth standards — compute_wfa","text":"","code":"# The first observation for each infant in `id` uses the INTERGROWTH-21st #  Newborn Size standards; the next two use either the INTERGROWTH-21st # Postnatal Growth standards or WHO Child Growth Standards. compute_wfa(   weight_kg = c(2.05, 8, 18, 2.05, 8, 18),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"),   id = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\")) ) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight\". #> [1] normal_weight      overweight         overweight         underweight_severe #> [5] overweight         overweight         #> Levels: underweight_severe underweight normal_weight overweight  # With outlier flagging: compute_wfa(   weight_kg = c(2.05, 8, 18, 2.05, 8, 18),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\"),   id = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\")),   outliers = TRUE ) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight\". #> [1] normal_weight      overweight         outlier            underweight_severe #> [5] overweight         overweight         #> Levels: underweight_severe underweight normal_weight overweight outlier  # If you don't specify `id`, the function will not identify that the fourth # data point is a birth measurement, and will categorise it as underweight # instead of severely stunting compute_wfa(   weight_kg = c(2.05, 8, 18, 2.05, 8, 18),   age_days = c(0, 100, 500, 2, 100, 500),   gest_days = c(245, 245, 245, 280, 280, 280),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\") ) #> ! Unused factor levels kept after weight-for-age (underweight) categorisation: #> \"underweight_severe\". #> [1] normal_weight overweight    overweight    underweight   overweight    #> [6] overweight    #> Levels: underweight_severe underweight normal_weight overweight"},{"path":"https://lshtm-gigs.github.io/gigs/reference/dot-gigs_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Package-level gigs options — .gigs_options","title":"Package-level gigs options — .gigs_options","text":"environment containing six named character vectors. define gigs handles inputs missing, undefined, invalid elements: \"handle_missing_data\" - gigs handle missing (NA) elements? \"handle_undefined_data\" - gigs handle undefined (NaN, Inf, -Inf) elements? \"handle_oob_xvar\" - gigs handle elements x variables bounds standard use? \"handle_invalid_sex\" - gigs handle elements sex one \"M\" \"F\"? \"handle_oob_centiles\" - centile2value functions, gigs handle elements p 0 1? options can take one three values: \"quiet\" - Invalid elements set NA, silently. \"warn\" - Invalid elements set NA, warnings issued done. \"error\" - Invalid elements cause informative errors. default, option .gigs_options set \"warn\", informed invalid data used input. Use  gigs_option_set() gigs_option_set() change behaviour.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/dot-gigs_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Package-level gigs options — .gigs_options","text":"named environment, name maps onto specific option GIGS package.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/dot-gigs_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package-level gigs options — .gigs_options","text":"","code":"# Get the names of all available options names(.gigs_options) #> [1] \"handle_oob_centiles\"   \"handle_unused_levels\"  \"handle_undefined_data\" #> [4] \"handle_oob_xvar\"       \"handle_missing_data\"   \"handle_invalid_sex\""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gigs: Assess Fetal, Newborn, and Child Growth with International Standards — gigs-package","title":"gigs: Assess Fetal, Newborn, and Child Growth with International Standards — gigs-package","text":"Convert anthropometric measures z-scores/centiles using INTERGROWTH-21st growth standards. includes functions classification newborn infant growth, including size gestational age, stunting, wasting, weight--age.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gigs: Assess Fetal, Newborn, and Child Growth with International Standards — gigs-package","text":"Maintainer: Simon Parker simon.parker1471@outlook.com (ORCID) contributors: Linda Vesel (ORCID) [data contributor] Eric Ohuma (ORCID) [data contributor] Chitra Saraswati (ORCID) [reviewer] Victor Ordu (ORCID) [reviewer] Bill & Melinda Gates Foundation [funder] London School Hygiene & Tropical Medicine [copyright holder]","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gigs: Assess Fetal, Newborn, and Child Growth with International Standards — gigs-package","text":"","code":"if (FALSE) { # \\dontrun{ help(package = \"gigs\") browseURL(\"https://www.github.com/lshtm-gigs/gigs\") } # }"},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set gigs package-level options — gigs_options","title":"Get and set gigs package-level options — gigs_options","text":"default, gigs handle invalid input data, e.g. missing (NA) undefined (NaN, Inf -Inf) values, warning presence replacing invalid values NA. also warn unused factor levels running growth outcome analyses. can change input-checking behaviour gigs_option_set() gigs silently, make gigs throw errors confronted bad data. can also make gigs drop unused factor levels outputs, silence warnings unused factor levels. can also change options gigs input-checking using gigs_input_options_set().","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set gigs package-level options — gigs_options","text":"","code":"gigs_option_get(option, silent = FALSE)  gigs_option_set(option, new_value, silent = FALSE)  gigs_input_options_set(new_value, silent = FALSE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set gigs package-level options — gigs_options","text":"option single case-sensitive character variable, one : \"handle_missing_data\" - gigs handle missing (NA) elements? \"handle_undefined_data\" - gigs handle undefined (NaN, Inf, -Inf) elements? \"handle_oob_xvar\" - gigs handle elements x variables bounds standard use? \"handle_invalid_sex\" - gigs handle elements sex one \"M\" \"F\"? \"handle_oob_centiles\" - centile2value functions, gigs handle elements p 0 1? \"handle_unused_levels\" - generating growth categories factors, gigs drop keep unused factor levels, issue warnings unused factor levels occur? silent single logical value controlling whether message printed console describing either: current value option gigs_option_get(). new_value option gigs_option_set(). argument accept integer place logical value. new_value single case-sensitive character variable. options except \"handle_unused_levels\", one : \"quiet\" - gigs replace invalid vector elements NA quietly. \"warn\" -  gigs replace invalid vector elements NA loudly. \"error\" - gigs throw informative errors invalid inputs encountered. \"handle_unused_levels\", new_value one : \"keep_quiet\" - Keep unused factor levels, issue warning. \"keep_warn\" - Keep unused factor levels, whilst issuing warning. \"drop_quiet\" - Drop unused factor levels, issue warning. \"drop_warn\" - Drop unused factor levels, whilst issuing warning. default, GIGS options \"warn\" input handling \"keep_warn\" \"handle_unused_levels\"","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set gigs package-level options — gigs_options","text":"single-length character vector. gigs_option_get(), current value option; gigs_option_get(), new value option; gigs_input_options_set(), new_value. silent = FALSE (default), informative messages printed console regarding current/new values option.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set gigs package-level options — gigs_options","text":"","code":"# Show the names of all available options names(.gigs_options) #> [1] \"handle_oob_centiles\"   \"handle_unused_levels\"  \"handle_undefined_data\" #> [4] \"handle_oob_xvar\"       \"handle_missing_data\"   \"handle_invalid_sex\"     # Retrieve the value of a gigs option (if `silent = FALSE`, would print a # message) option_value <- gigs_option_get(\"handle_missing_data\", silent = TRUE) print(option_value) #> [1] \"warn\"  # Set the value of an option gigs_option_set(\"handle_undefined_data\", \"error\", silent = TRUE)  # Check that change has occurred option_value <- gigs_option_get(\"handle_undefined_data\", silent = TRUE) print(option_value) #> [1] \"error\"  # Suppress printed output with `silent = TRUE` gigs_option_set(\"handle_undefined_data\", \"quiet\", silent = TRUE)  # Set all GIGS options for input checking gigs_input_options_set(\"warn\", silent = TRUE)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_zscoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate z-scores for anthropometric measures according to GIGS guidance — gigs_waz","title":"Calculate z-scores for anthropometric measures according to GIGS guidance — gigs_waz","text":"functions calculate z-scores weight--age (WAZs), length/height--age (LHAZs), weight--length/height (WLZs), head circumference--age (HCAZs). growth standard used observation differs based gestational post-menstrual age infant analysed. different procedures based advised use growth standard, measurement considered 'birth measurement' first measurement taken infant taken <3 days birth: gest_days < 24 weeks (168 days): Birth: standard available Postnatal: IG-21st Postnatal Growth standards 27 64 weeks' PMA Postnatal: Uncorrected standard 64 weeks' PMA gest_days >= 24 weeks (168 days): Birth: IG-21st Newborn Size standards birth (including Preterm Newborn Size standards born 33 weeks). Postnatal: IG-21st Postnatal Growth standards 27 64 weeks' PMA Postnatal: Uncorrected Child Growth standards 64 weeks' PMA gest_days >= 37 weeks (259 days): Birth: IG-21st Newborn Size standards Postnatal: Uncorrected Child Growth standards gest_days >= 43 weeks (301 days): Birth: standard available Postnatal: Uncorrected Child Growth standards gigs_wlz(), two standards available: weight--length standard, applied age_days < 731. weight--height standard, applied age_days >= 731.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_zscoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate z-scores for anthropometric measures according to GIGS guidance — gigs_waz","text":"","code":"gigs_waz(weight_kg, age_days, gest_days, sex, id = NULL)  gigs_lhaz(lenht_cm, age_days, gest_days, sex, id = NULL)  gigs_wlz(weight_kg, lenht_cm, age_days, gest_days, sex, id = NULL)  gigs_hcaz(headcirc_cm, age_days, gest_days, sex, id = NULL)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_zscoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate z-scores for anthropometric measures according to GIGS guidance — gigs_waz","text":"weight_kg numeric vector length one weight kg. age_days numeric vector length one ages days. gest_days numeric vector length one gestational ages days. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options. id factor length one ID observation, either ordered unordered, containing missing (NA) values. supplied, id used ensure earliest measurement individual used birth measure. Leave argument NULL data comes individual. Default = NULL. lenht_cm numeric vector length one length height cm. recumbent length age_days < 731, standing height age_days >= 731. headcirc_cm Numeric vector length one head circumference cm.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_zscoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate z-scores for anthropometric measures according to GIGS guidance — gigs_waz","text":"numeric vector z-scores, derived using appropriate growth standard element-wise combination gest_days age_days. gigs_wlz(), birth WLZs missing (NA), INTERGROWTH-21st Newborn standard weight--length.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_zscoring.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate z-scores for anthropometric measures according to GIGS guidance — gigs_waz","text":"functions expect vectors recyclable vctrs::vec_recycle_common().","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/gigs_zscoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate z-scores for anthropometric measures according to GIGS guidance — gigs_waz","text":"","code":"gest_days <- c(rep(35 * 7, 3), rep(35 * 7, 3)) age_days <- c(0, 100, 500, 2, 100, 500) sex <- rep.int(c(\"M\", \"F\"), c(3, 3)) wt_kg <- c(3, 6, 9, 3, 6, 9) len_cm <- rep.int(c(52.2, 60.4, 75), 2) head_cm <- rep.int(c(30, 40, 49), 2) ids <- factor(rep.int(c(\"A\", \"B\"), c(3, 3)))  # Weight-for-age z-score (WAZ) waz <- gigs_waz(weight_kg = wt_kg,                 age_days = age_days,                 gest_days = gest_days,                 sex = sex,                 id = ids) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. print(waz) #> [1]  1.2230003  0.7413417 -1.4866806  1.5420839  1.4395342 -0.7859202  # Note - if you don't specify 'id' you'll get different results! waz_no_id <- gigs_waz(weight_kg = wt_kg,                       age_days = age_days,                       gest_days = gest_days,                       sex = sex) print(waz == waz_no_id) #> [1]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  # Length/height-for-age z-score (LHAZ) lhaz <- gigs_lhaz(lenht_cm = len_cm,                   age_days = age_days,                   gest_days = gest_days,                   sex = sex,                   id = ids) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. print(lhaz) #> [1]  2.8236856  0.8876444 -2.1690082  3.4154524  1.8205012 -1.4423063  # Weight-for-length/height z-score (WLZ) #   Note: There's no at-birth standards for weight-for-length, so elements 1 #   and 4 have `NA` values wlz <- gigs_wlz(weight_kg = wt_kg,                 lenht_cm = len_cm,                 age_days = age_days,                 gest_days = gest_days,                 sex = sex,                 id = ids) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. print(wlz) #> [1]         NA  1.6408675 -0.6621871         NA  1.3314150 -0.1829182  # Head circumference-for-age z-score (HCAZ) hcaz <- gigs_hcaz(headcirc_cm = head_cm,                   age_days = age_days,                   gest_days = gest_days,                   sex = sex,                   id = ids) #> Warning: There was 1 'at birth' observation where `age_days` > 0.5. #> ℹ This occurred for ID B. print(hcaz) #> [1] -1.5588136  0.9510032  1.4502711 -1.3289704  1.7433668  2.2148421"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet.html","id":null,"dir":"Reference","previous_headings":"","what":"INTERGROWTH-21st Fetal Standards growth curve data — ig_fet","title":"INTERGROWTH-21st Fetal Standards growth curve data — ig_fet","text":"set nested lists containing tables reference values different z-scores/centiles valid gestational ages days. list ordered acronym first, z-score/centile (available - Fetal standards centile tables).","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"INTERGROWTH-21st Fetal Standards growth curve data — ig_fet","text":"INTERGROWTH-21st Pregnancy Dating (CRL) INTERGROWTH-21st Symphysis-Fundal Height standard INTERGROWTH-21st Fetal Growth standards INTERGROWTH-21st Fetal Doppler standards INTERGROWTH-21st Gestational Weight Gain standard","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"INTERGROWTH-21st Fetal Standards growth curve data — ig_fet","text":"possible, tables taken online sources . available INTERGROWTH-21st website, taken publications listed .","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"INTERGROWTH-21st Fetal Standards growth curve data — ig_fet","text":"Papageorghiou , Ohuma EO, Altman DG, Todros T, Cheikh Ismail L, Lambert et al. International standards fetal growth based serial ultrasound measurements: Fetal Growth Longitudinal Study INTERGROWTH-21st Project. Lancet 2014, 384(9946):869-79. doi:10.1016/S0140-6736(14)61490-2 Stirnemann J, Villar J, Salomon LJ, Ohuma EO, Lamber , Victoria CG et al. International Estimated Fetal Weight Standards INTERGROWTH-21st Project. Ultrasound Obstet Gynecol 2016, 49:478-486 doi:10.1002/uog.17347 Stirnemann J, Salomon LJ, Papageorghiou . INTERGROWTH-21st standards Hadlock's estimation fetal weight. Ultrasound Obstet Gynecol 2020, 56(6):946-948 doi:10.1002/uog.22000 Papageorghiou , Ohuma EO, Gravett MG, Lamber , Noble JA, Pang R et al. International standards symphysis-fundal height based serial measurements Fetal Growth Longitudinal Study INTERGROWTH-21st Project: prospective cohort study eight countries. BMJ 2016, 355:i5662 doi:10.1136/bmj.i5662 Papageorghiou , Kennedy SH, Salomon LJ, Ohuma EO, Cheikh Ismail L, Barros FC et al. International standards early fetal size pregnancy dating based ultrasound measurement crown-rump length first trimester pregnancy. Ultrasound Obstet Gynecol 2014, 44(6):641-48 doi:10.1002/uog.13448 Cheikh Ismail L, Bishop DC, Pang R, Ohuma EO, Kac G, Abrams B et al. Gestational weight gain standards based women enrolled Fetal Growth Longitudinal Study INTERGROWTH-21st Project: prospective longitudinal cohort study. BMJ 2016, 352:i555 doi:10.1136/bmj.i555 Drukker L, Staines-Urias E, Villar J, Barros FC, Carvalho M, Munim S et al. International gestational age-specific centiles umbilical artery Doppler indices: longitudinal prospective cohort study INTERGROWTH-21st Project. J Obstet Gynecol 2021, 222(6):602.e1-602.e15 doi:10.1016/j.ajog.2020.01.012 Rodriguez-Sibaja MJ, Villar J, Ohuma EO, Napolitano R, Heyl S, Carvalho M et al. Fetal cerebellar growth Sylvian fissure maturation: international standards Fetal Growth Longitudinal Study INTERGROWTH-21st Project Ultrasound Obstet Gynecol 2021, 57(4):614-623 doi:10.1002/uog.22017 Napolitano R, Molloholli M, Donadono V, Ohuma EO, Wanyonyi SZ, Kemp B et al. International standards fetal brain structures based serial ultrasound measurements Fetal Growth Longitudinal Study INTERGROWTH-21st Project Ultrasound Obstet Gynecol 2020, 56(3):359-370 doi:10.1002/uog.21990","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"INTERGROWTH-21st Fetal Standards growth curve data — ig_fet","text":"","code":"names(gigs::ig_fet) #>  [1] \"hcfga\"   \"bpdfga\"  \"acfga\"   \"flfga\"   \"ofdfga\"  \"efwfga\"  \"sfhfga\"  #>  [8] \"crlfga\"  \"gafcrl\"  \"gwgfga\"  \"pifga\"   \"rifga\"   \"sdrfga\"  \"tcdfga\"  #> [15] \"gaftcd\"  \"poffga\"  \"sffga\"   \"avfga\"   \"pvfga\"   \"cmfga\"   \"hefwfga\" head(gigs::ig_fet$hcfga$zscores) #>   gest_days SD3neg SD2neg SD1neg   SD0   SD1   SD2   SD3 #> 1        98   81.1   86.7   92.3  97.9 103.5 109.0 114.6 #> 2       105   92.6   98.5  104.4 110.4 116.3 122.2 128.2 #> 3       112  104.1  110.4  116.6 122.9 129.2 135.5 141.7 #> 4       119  115.7  122.3  128.8 135.4 142.0 148.6 155.2 #> 5       126  127.2  134.1  141.0 147.9 154.8 161.7 168.6 #> 6       133  138.7  145.9  153.1 160.3 167.4 174.6 181.8"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_fetal_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","title":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","text":"Estimate fetal weight grams using INTERGROWTH-21st predictive equation","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_fetal_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","text":"","code":"ig_fet_estimate_fetal_weight(abdocirc_mm, headcirc_mm)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_fetal_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","text":"abdocirc_mm Numeric vector abdominal circumference value(s) mm. length one length headcirc_mm. headcirc_mm Numeric vector head circumference value(s) mm. length one length abdocirc_mm.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_fetal_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","text":"Numeric vector estimated fetal weight(s) g, length longest input vector.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_fetal_weight.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","text":"Inputs recycled using vctrs::vec_recycle_common().","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_fetal_weight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","text":"Stirnemann J, Villar J, Salomon LJ, Ohuma EO, Lamber , Victoria CG et al. International Estimated Fetal Weight Standards INTERGROWTH-21st Project. Ultrasound Obstet Gynecol 2016, 49:478-486 doi:10.1002/uog.17347","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_fetal_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate fetal weight in grams using the INTERGROWTH-21st predictive equation — ig_fet_estimate_fetal_weight","text":"","code":"# Estimate fetal weight in grams ig_fet_estimate_fetal_weight(abdocirc_mm = 31:33,                              headcirc_mm = 25:27) #> [1] 176.1847 176.8672 177.5590  # Input vectors are recycled using vctrs::vec_recycle_common ig_fet_estimate_fetal_weight(abdocirc_mm = 25.0,                              headcirc_mm = 24:26) #> [1] 174.9972 175.5469 176.0984"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","title":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","text":"Estimate gestational age using INTERGROWTH-21st predictive equations","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","text":"","code":"ig_fet_estimate_ga(crl_mm = NULL, headcirc_mm = NULL, femurlen_mm = NULL)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","text":"crl_mm Numeric vector crown-rump length value(s) mm taken ultrasound scan obtained 56 97 days since last menstrual period. NULL (default), length one length inputs. function return NA elements crl_mm 15 95 mm headcirc_mm abdocirc_mm values. headcirc_mm Numeric vector head circumference value(s) cm taken ultrasound scan obtained 98 181 days since last menstrual period. NULL (default), length one length inputs. femurlen_mm Numeric vector femur length value(s) cm. NULL (default), length one length arguments inputs.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_ga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","text":"numeric vector estimated gestational ages days. vector length equal outputs vctrs::vec_recycle_common().","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_ga.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","text":"Vector inputs function recycled using vctrs::vec_recycle_common(). function attempt estimate gestational age (GA) three steps, highest lowest accuracy. First, using crown-rump length measurements obtained early pregnancy, head circumference femur length measurements, finally head circumference alone.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_ga.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","text":"Papageorghiou , Kennedy SH, Salomon LJ, Ohuma EO, Cheikh Ismail L, Barros FC et al. International standards early fetal size pregnancy dating based ultrasound measurement crown-rump length first trimester pregnancy. Ultrasound Obstet Gynecol 2014, 44(6):641-48 doi:10.1002/uog.13448 Papageorghiou , Kemp B, Stones W, Ohuma EO, Kennedy SH, Purwar M et al. Ultrasound-based gestational age estimation late pregnancy. Ultrasound Obstet Gynecol 2016. 48(6):719-26 doi:10.1002/uog.15894","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_fet_estimate_ga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate gestational age using INTERGROWTH-21st predictive equations — ig_fet_estimate_ga","text":"","code":"# Estimate gestational age in days using crown-rump length (most accurate) ig_fet_estimate_ga(crl_mm = 40:45) #> [1] 75.20116 75.80278 76.40134 76.99695 77.58970 78.17970  # Estimate gestational age in days using head circumference and femur length # (second-most accurate) ig_fet_estimate_ga(headcirc_mm = 250:255, femurlen_mm = 55:60) #> [1] 200.5229 202.7155 204.9335 207.1772 209.4469 211.7429  # Estimate gestational age in days using head circumference only (least # accurate) ig_fet_estimate_ga(headcirc_mm = 250:255) #> [1] 189.8030 190.5331 191.2662 192.0023 192.7416 193.4839  # The function defaults to CRL if available ig_fet_estimate_ga(crl_mm = 40:45,                    headcirc_mm = 250:255,                    femurlen_mm = 55:60) #> [1] 75.20116 75.80278 76.40134 76.99695 77.58970 78.17970  # Inputs are recycled using [vctrs::vec_recycle_common] ig_fet_estimate_ga(headcirc_mm = 252,                    femurlen_mm = 55:60) #> [1] 201.2413 203.0790 204.9335 206.8049 208.6934 210.5992"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs.html","id":null,"dir":"Reference","previous_headings":"","what":"INTERGROWTH-21st Newborn Size Standards (including very preterm) growth curve data — ig_nbs","title":"INTERGROWTH-21st Newborn Size Standards (including very preterm) growth curve data — ig_nbs","text":"set nested lists containing tables reference values different z-scores/centiles valid gestational ages days. list ordered acronym first, sex finally z-score/centile.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"INTERGROWTH-21st Newborn Size Standards (including very preterm) growth curve data — ig_nbs","text":"INTERGROWTH-21st Newborn Size Preterm InfantsINTERGROWTH-21st Newborn Size StandardsINTERGROWTH-21st Newborn Size Standards - Body Composition","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"INTERGROWTH-21st Newborn Size Standards (including very preterm) growth curve data — ig_nbs","text":"tables package combined versions tables published Villar et al. (2014) Villar et al. (2016), cover 168 300 days' gestational age. body composition tables (ffmfga, bfpfga, fmfga) cover smaller gestational age span, ranging 266 294 days' (38 42 weeks') gestational age.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"INTERGROWTH-21st Newborn Size Standards (including very preterm) growth curve data — ig_nbs","text":"Villar J, Cheikh Ismail L, Victora CG, Ohuma EO, Bertino E, Altman DG, et al. International standards newborn weight, length, head circumference gestational age sex: Newborn Cross-Sectional Study INTERGROWTH-21st Project. Lancet 2014, 384(9946):857-68. doi:10.1016/S0140-6736(14)60932-6 Villar J, Giuliani F, Fenton TR, Ohuma EO, Ismail LC, Kennedy SH et al. INTERGROWTH-21st preterm size birth reference charts. Lancet 2016, 387(10021):844-45. doi:10.1016/S0140-6736(16)00384-6 Villar J, Puglia FA, Fenton TR, Ismal LC, Staines-Urias E, Giuliani F, et al. Body composition birth relationship neonatal anthropometric ratios: newborn body composition study INTERGROWTH-21st project. Pediatric Research 2017, 82:305-316. doi:10.1038/pr.2017.52","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"INTERGROWTH-21st Newborn Size Standards (including very preterm) growth curve data — ig_nbs","text":"","code":"names(gigs::ig_nbs) #> [1] \"wfga\"   \"lfga\"   \"hcfga\"  \"wlrfga\" \"ffmfga\" \"bfpfga\" \"fmfga\"  head(gigs::ig_nbs$wfga$male$zscores) #>   gest_days SD3neg SD2neg SD1neg  SD0  SD1  SD2  SD3 #> 1       168   0.36   0.43   0.53 0.64 0.77 0.94 1.14 #> 2       169   0.36   0.44   0.54 0.65 0.79 0.96 1.16 #> 3       170   0.37   0.45   0.55 0.66 0.80 0.98 1.18 #> 4       171   0.38   0.46   0.56 0.68 0.82 0.99 1.21 #> 5       172   0.39   0.47   0.57 0.69 0.84 1.01 1.23 #> 6       173   0.39   0.48   0.58 0.70 0.85 1.03 1.25"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs_coeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"INTERGROWTH-21st Newborn Size Standards GAMLSS coefficients — ig_nbs_coeffs","title":"INTERGROWTH-21st Newborn Size Standards GAMLSS coefficients — ig_nbs_coeffs","text":"set nested lists containing mu, sigma, nu tau values across gestational ages either sex, INTERGROWTH-21st weight/length/head circumference--gestational age standards. lists ordered acronym, sex.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs_coeffs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"INTERGROWTH-21st Newborn Size Standards GAMLSS coefficients — ig_nbs_coeffs","text":"Mu/sigma/nu/tau values provided Dr Eric Ohuma.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs_coeffs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"INTERGROWTH-21st Newborn Size Standards GAMLSS coefficients — ig_nbs_coeffs","text":"Villar J, Cheikh Ismail L, Victora CG, Ohuma EO, Bertino E, Altman DG, et al. International standards newborn weight, length, head circumference gestational age sex: Newborn Cross-Sectional Study INTERGROWTH-21st Project. Lancet 2014, 384(9946):857-68. doi:10.1016/S0140-6736(14)60932-6 Villar J, Giuliani F, Fenton TR, Ohuma EO, Ismail LC, Kennedy SH et al. INTERGROWTH-21st preterm size birth reference charts. Lancet 2016, 387(10021):844-45. doi:10.1016/S0140-6736(16)00384-6 Villar J, Puglia FA, Fenton TR, Ismal LC, Staines-Urias E, Giuliani F, et al. Body composition birth relationship neonatal anthropometric ratios: newborn body composition study INTERGROWTH-21st project. Pediatric Research 2017, 82:305-316. doi:10.1038/pr.2017.52","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_nbs_coeffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"INTERGROWTH-21st Newborn Size Standards GAMLSS coefficients — ig_nbs_coeffs","text":"","code":"names(gigs::ig_nbs_coeffs) #> [1] \"wfga\"  \"lfga\"  \"hcfga\" head(gigs::ig_nbs_coeffs$wfga$male) #>   gest_days       mu     sigma       nu      tau #> 1       231 1.905973 0.4027349 1.095261 17.05299 #> 2       232 1.945933 0.4024603 1.095261 17.05299 #> 3       233 1.985389 0.4021894 1.095261 17.05299 #> 4       234 2.024345 0.4019221 1.095261 17.05299 #> 5       235 2.062806 0.4016584 1.095261 17.05299 #> 6       236 2.100775 0.4013983 1.095261 17.05299"},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_png.html","id":null,"dir":"Reference","previous_headings":"","what":"INTERGROWTH-21st Postnatal Growth Standards growth curve data — ig_png","title":"INTERGROWTH-21st Postnatal Growth Standards growth curve data — ig_png","text":"set nested lists containing tables reference values different z-scores/centiles valid post-menstrual ages. list ordered acronym first, sex, finally z-score/centile.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_png.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"INTERGROWTH-21st Postnatal Growth Standards growth curve data — ig_png","text":"INTERGROWTH-21st Postnatal Growth Preterm Infants","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_png.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"INTERGROWTH-21st Postnatal Growth Standards growth curve data — ig_png","text":"Villar J, Giuliani F, Bhutta ZA, Bertino E, Ohuma EO, Ismail LC et al. Postnatal growth standards preterm infants: Preterm Postnatal Follow-Study INTERGROWTH-21st Project. Lancet Glob Health 2015, 3(11):e681-e691. doi:10.1016/S2214-109X(15)00163-1","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/ig_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"INTERGROWTH-21st Postnatal Growth Standards growth curve data — ig_png","text":"","code":"names(gigs::ig_png) #> [1] \"wfa\"  \"lfa\"  \"hcfa\" \"wfl\"  head(gigs::ig_png$wfa$male$zscores) #>   pma_weeks SD3neg SD2neg SD1neg  SD0  SD1  SD2  SD3 #> 1        27   0.36   0.44   0.55 0.67 0.83 1.02 1.25 #> 2        28   0.46   0.56   0.68 0.83 1.01 1.23 1.50 #> 3        29   0.57   0.69   0.83 1.00 1.21 1.46 1.76 #> 4        30   0.69   0.83   0.99 1.19 1.42 1.70 2.04 #> 5        31   0.83   0.98   1.17 1.39 1.65 1.96 2.33 #> 6        32   0.97   1.14   1.35 1.60 1.89 2.23 2.63"},{"path":"https://lshtm-gigs.github.io/gigs/reference/life6mo.html","id":null,"dir":"Reference","previous_headings":"","what":"Data extract from the Low birthweight Infant Feeding Exploration (LIFE) study — life6mo","title":"Data extract from the Low birthweight Infant Feeding Exploration (LIFE) study — life6mo","text":"subset anthropometric data 300 singleton infants enrolled Low birthweight Infant Feeding Exploration (LIFE) study. variables follows:","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/life6mo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data extract from the Low birthweight Infant Feeding Exploration (LIFE) study — life6mo","text":"data frame 2,191 rows 10 variables: id: Unique ID infant dataset (1–300). visitweek: Chronological age weeks (±1) study visit occurred (0–26). sex: Sex infant factor (\"M\" = Male; \"F\" = Female). gestage: Best obstetric estimate gestational age days (181–291). age_days: Chronological age days visit; equal pma - gestage (0–242). pma: Post-menstrual age days (182–528). wt_kg: Mean weight kg (1.24–9.40667). len_cm: Mean length cm (37.37–72.93). headcirc_cm: Mean head circumference cm (23.20–44.87). muac_cm: Mean mid-upper arm circumference cm (6.30–16.83).","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/life6mo.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Data extract from the Low birthweight Infant Feeding Exploration (LIFE) study — life6mo","text":"subsetted full LIFE 6 month dataset gigs. , extract includes data 300 singleton pregnancies best estimate gestational age >168 days. also removed rows corresponding visit weeks measurement data taken due non-attendance visit.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/life6mo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data extract from the Low birthweight Infant Feeding Exploration (LIFE) study — life6mo","text":"Vesel L, Bellad RM, Manji K, Saidi F, Velasquez E, Sudfeld C, et al. Feeding practices growth patterns moderately low birthweight infants resource-limited settings: results multisite, longitudinal observational study. BMJ Open 2023, 13(2):e067316. doi:10.1136/BMJOPEN-2022-067316","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/life6mo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data extract from the Low birthweight Infant Feeding Exploration (LIFE) study — life6mo","text":"","code":"head(gigs::life6mo) #>   id gestage sex visitweek pma age_days    wt_kg   len_cm headcirc_cm   muac_cm #> 1  1     273   M         0 273        0 2.300000 42.06667    33.26667  9.433333 #> 2  1     273   M         1 280        7 2.185000 42.13333    33.33333  9.566667 #> 3  1     273   M         2 288       15 2.325000 43.66667    35.06667  9.633334 #> 4  1     273   M         4 301       28 2.575000 47.46667    37.66667  9.933333 #> 5  1     273   M         6 316       43 3.410000 49.00000    39.00000 11.400000 #> 6  1     273   M        10 344       71 4.262333 55.03333    41.03333 13.466667"},{"path":"https://lshtm-gigs.github.io/gigs/reference/report_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Check required units for a conversion using gigs — report_units","title":"Check required units for a conversion using gigs — report_units","text":"Check required units conversion using gigs","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/report_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check required units for a conversion using gigs — report_units","text":"","code":"report_units(family, acronym)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/report_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check required units for a conversion using gigs — report_units","text":"family single string denoting family growth standards use. Must one \"ig_fet\", \"ig_nbs\", \"ig_png\", \"who_gs\", function throw error. argument case-sensitive. acronym single string denoting specific growth standard use. allowed values acronym depend value family, listed documentation x argument. Incompatible family acronym values cause errors thrown. argument case-sensitive.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/report_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check required units for a conversion using gigs — report_units","text":"Returns message describing units required conversion desired growth standard.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/report_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check required units for a conversion using gigs — report_units","text":"","code":"# Get units for working with the IG-21st Newborn Size Standard for # weight-for-GA report_units(\"ig_nbs\", \"wfga\") #> You're using \"wfga\" from the INTERGROWTH-21st Newborn Size Standards #> (\"ig_nbs\"). #> ℹ Units for `y`: Weight (kg). #> ℹ Units for `x`: Gestational age (days).  # Get units for working with the IG-21st Fetal Standard for # gestational weight gain report_units(\"ig_fet\", \"gwgfga\") #> You're using \"gwgfga\" from the INTERGROWTH-21st Fetal Standards (\"ig_fet\"). #> ℹ Units for `y`: Gestational weight gain (g). #> ℹ Units for `x`: Gestational age (days)."},{"path":"https://lshtm-gigs.github.io/gigs/reference/shared_roxygen_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Shared roxygen parameters — shared_roxygen_params","title":"Shared roxygen parameters — shared_roxygen_params","text":"Many parameters [gigs] shared different functions. roxygen block makes sharing parameters simple.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/shared_roxygen_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shared roxygen parameters — shared_roxygen_params","text":"y Numeric vector length one anthropometric measurement(s) convert centiles/z-scores. Units depend acronym use. z, p Numeric vector length one centiles/z-scores convert values. p, gigs warn elements p 0 1. can customise behaviour using GIGS package-level options. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise behaviour using GIGS package-level options.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/shared_roxygen_params.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shared roxygen parameters — shared_roxygen_params","text":"Input vectors acronym family recycled vctrs::vec_recycle_common(), must adhere vctrs recycling rules.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/value2zscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert anthropometric measures to z-scores/centiles using international growth standards — value2zscore","title":"Convert anthropometric measures to z-scores/centiles using international growth standards — value2zscore","text":"Convert anthropometric measures z-scores/centiles using international growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/value2zscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert anthropometric measures to z-scores/centiles using international growth standards — value2zscore","text":"","code":"value2zscore(y, x, sex = NULL, family, acronym)  value2centile(y, x, sex = NULL, family, acronym)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/value2zscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert anthropometric measures to z-scores/centiles using international growth standards — value2zscore","text":"y Numeric vector length one anthropometric measurement(s) convert centiles/z-scores. Units depend combination family acronym use, can check report_units(). default, GIGS warn elements y missing (NA) undefined (NaN/Inf), replace latter NA. can customise behaviour using GIGS package-level options. x Numeric vector x values, take different units depending growth standard use. know units use, run report_units(family, acronym). Limits combination follows: Growth Standards (family = \"who_gs\") 0 1856 days \"wfa\", \"bfa\", \"lhfa\", \"hcfa\". 45 110 cm \"wfl\". 65 120 cm \"wfh\". 91 1856 days \"acfa\", \"ssfa\", \"tsfa\". INTERGROWTH-21st Fetal Standards (family = \"ig_fet\") 98 280 days \"hcfga\", \"bpdfga\", \"acfga\", \"flfga\", \"ofdfga\", \"tcdfga\". 154 280 days \"efwfga\". 112 294 days \"sfhfga\". 58 105 days \"crlfga\". 19 95 mm \"gafcrl\". 105 280 days \"gwgfga\". 168 280 days \"pifga\", \"rifga\", \"sdrfga\" (INTERGROWTH-21st Fetal Doppler standards). 12 55 mm \"tcdfga\". 105 252 days \"poffga\", \"sffga\", \"avfga\", \"pvfga\", \"cmfga\" (INTERGROWTH-21st Fetal Brain Development standards). 126 287 days \"hefwfga\" (INTERGROWTH-21st standard Hadlock-based estimated fetal weight). INTERGROWTH-21st Newborn Size Standards (family = \"ig_nbs\") 168 300 days \"wfga\", \"lfga\", \"hcfga\", \"wlrfga\". 266 280 days \"fmfga\", \"bfpfga\", \"ffmfga\". INTERGROWTH-21st Postnatal Growth Standards (family = \"ig_png\") 27 64 weeks \"wfa\", \"lfa\", \"hcfa\". 35 65 cm \"wfl\". default, gigs replace --bounds elements x NA warn . also warn elements x missing (NA) undefined (NaN/Inf). can customise behaviour using GIGS package-level options. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument left NULL (default) family == \"ig_fet\". argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise  behaviour using GIGS package-level options. family single string denoting family growth standards use. Must one \"ig_fet\", \"ig_nbs\", \"ig_png\", \"who_gs\", function throw error. argument case-sensitive. acronym single string denoting specific growth standard use. allowed values acronym depend value family, listed documentation x argument. Incompatible family acronym values cause errors thrown. argument case-sensitive.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/value2zscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert anthropometric measures to z-scores/centiles using international growth standards — value2zscore","text":"Numeric vector z-scores/centiles length equal longest input vector.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/value2zscore.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert anthropometric measures to z-scores/centiles using international growth standards — value2zscore","text":"Inputs acronym family recycled vctrs::vec_recycle_common(), must adhere vctrs recycling rules.","code":""},{"path":[]},{"path":"https://lshtm-gigs.github.io/gigs/reference/value2zscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert anthropometric measures to z-scores/centiles using international growth standards — value2zscore","text":"","code":"# Convert in the weight-for-age standard from the WHO Child Growth Standards value2zscore(3, 0, \"M\", family = \"who_gs\", acronym = \"wfa\") #> [1] -0.7342639  # Or obtain centiles... value2centile(3, 0, \"M\", family = \"who_gs\", acronym = \"wfa\") #> [1] 0.231394  # Inputs will be recycled if necessary value2centile(3, 0, c(\"M\", \"F\"), family = \"ig_nbs\", acronym = \"wfga\") #> Warning: Input arguments have invalid values: #> ℹ Argument `x`: All (1) elements were out-of-bounds (see the GIGS conversion function documentation for bounds). #> [1] NA NA"},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"WHO Child Growth Standards growth curve data — who_gs","title":"WHO Child Growth Standards growth curve data — who_gs","text":"set nested lists containing tables reference values different z-scores/centiles valid x values (usually age days, also length height cm weight--length (wfl) weight--height (wfh) standards, respectively). list ordered acronym first, sex finally z-score/centile.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"WHO Child Growth Standards growth curve data — who_gs","text":"Child Growth Standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"WHO Child Growth Standards growth curve data — who_gs","text":"de Onis M, Garza C, Victora CG, Onyango AW, Frongillo EA, Martines J. Multicentre Growth Reference Study: planning, study design, methodology Food Nutr Bull. 2004, 25(1 Suppl):S15-26. doi:10.1177/15648265040251s104 World Health Organisation. child growth standards: length/height--age, weight--age, weight--length, weight--height body mass index--age: methods development. Technical report, , Geneva, 2006. World Health Organisation. child growth standards: head circumference--age, arm circumference--age, triceps skinfold--age subscapular skinfold--age: methods development. Technical report, , Geneva, 2007.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WHO Child Growth Standards growth curve data — who_gs","text":"","code":"names(gigs::who_gs) #> [1] \"wfa\"  \"bfa\"  \"lhfa\" \"wfl\"  \"wfh\"  \"hcfa\" \"acfa\" \"ssfa\" \"tsfa\" head(gigs::who_gs$wfa$male$zscores) #>   age_days SD4neg SD3neg SD2neg SD1neg   SD0   SD1   SD2   SD3   SD4 #> 1        0  1.701  2.080  2.459  2.881 3.346 3.859 4.419 5.031 5.642 #> 2        1  1.692  2.065  2.437  2.854 3.317 3.830 4.394 5.013 5.633 #> 3        2  1.707  2.080  2.454  2.872 3.337 3.852 4.421 5.045 5.669 #> 4        3  1.725  2.100  2.475  2.895 3.363 3.881 4.453 5.083 5.712 #> 5        4  1.745  2.122  2.499  2.921 3.392 3.913 4.490 5.124 5.758 #> 6        5  1.767  2.146  2.525  2.949 3.422 3.947 4.528 5.167 5.806"},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs_coeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"WHO Child Growth Standards LMS coefficients — who_gs_coeffs","title":"WHO Child Growth Standards LMS coefficients — who_gs_coeffs","text":"set nested lists containing tables LMS values sex different combinations age/length-height/BMI. list ordered acronym first, sex.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs_coeffs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"WHO Child Growth Standards LMS coefficients — who_gs_coeffs","text":"Child Growth Standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs_coeffs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"WHO Child Growth Standards LMS coefficients — who_gs_coeffs","text":"World Health Organisation. child growth standards: length/height--age, weight--age, weight--length, weight--height body mass index--age: methods development. Technical report, , Geneva, 2006. World Health Organisation. child growth standards: head circumference--age, arm circumference--age, triceps skinfold--age subscapular skinfold--age: methods development. Technical report, , Geneva, 2007.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/who_gs_coeffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WHO Child Growth Standards LMS coefficients — who_gs_coeffs","text":"","code":"names(gigs::who_gs_coeffs) #> [1] \"wfa\"  \"bfa\"  \"lhfa\" \"wfl\"  \"wfh\"  \"hcfa\" \"acfa\" \"ssfa\" \"tsfa\" head(gigs::who_gs_coeffs$lhfa$male) #>   age_days L       M       S #> 1        0 1 49.8842 0.03795 #> 2        1 1 50.0601 0.03785 #> 3        2 1 50.2359 0.03775 #> 4        3 1 50.4118 0.03764 #> 5        4 1 50.5876 0.03754 #> 6        5 1 50.7635 0.03744"},{"path":"https://lshtm-gigs.github.io/gigs/reference/zscore2value.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert z-scores/centiles to anthropometric measures using international growth standards — zscore2value","title":"Convert z-scores/centiles to anthropometric measures using international growth standards — zscore2value","text":"Convert z-scores/centiles anthropometric measures using international growth standards","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/zscore2value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert z-scores/centiles to anthropometric measures using international growth standards — zscore2value","text":"","code":"zscore2value(z, x, sex = NULL, family, acronym)  centile2value(p, x, sex = NULL, family, acronym)"},{"path":"https://lshtm-gigs.github.io/gigs/reference/zscore2value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert z-scores/centiles to anthropometric measures using international growth standards — zscore2value","text":"z, p Numeric vector length one centiles/z-scores convert values. p, gigs warn elements p 0 1. can customise behaviour using GIGS package-level options. x Numeric vector x values, take different units depending growth standard use. know units use, run report_units(family, acronym). Limits combination follows: Growth Standards (family = \"who_gs\") 0 1856 days \"wfa\", \"bfa\", \"lhfa\", \"hcfa\". 45 110 cm \"wfl\". 65 120 cm \"wfh\". 91 1856 days \"acfa\", \"ssfa\", \"tsfa\". INTERGROWTH-21st Fetal Standards (family = \"ig_fet\") 98 280 days \"hcfga\", \"bpdfga\", \"acfga\", \"flfga\", \"ofdfga\", \"tcdfga\". 154 280 days \"efwfga\". 112 294 days \"sfhfga\". 58 105 days \"crlfga\". 19 95 mm \"gafcrl\". 105 280 days \"gwgfga\". 168 280 days \"pifga\", \"rifga\", \"sdrfga\" (INTERGROWTH-21st Fetal Doppler standards). 12 55 mm \"tcdfga\". 105 252 days \"poffga\", \"sffga\", \"avfga\", \"pvfga\", \"cmfga\" (INTERGROWTH-21st Fetal Brain Development standards). 126 287 days \"hefwfga\" (INTERGROWTH-21st standard Hadlock-based estimated fetal weight). INTERGROWTH-21st Newborn Size Standards (family = \"ig_nbs\") 168 300 days \"wfga\", \"lfga\", \"hcfga\", \"wlrfga\". 266 280 days \"fmfga\", \"bfpfga\", \"ffmfga\". INTERGROWTH-21st Postnatal Growth Standards (family = \"ig_png\") 27 64 weeks \"wfa\", \"lfa\", \"hcfa\". 35 65 cm \"wfl\". default, gigs replace --bounds elements x NA warn . also warn elements x missing (NA) undefined (NaN/Inf). can customise behaviour using GIGS package-level options. sex Character vector length one sex(es), either \"M\" (male) \"F\" (female). argument left NULL (default) family == \"ig_fet\". argument case-sensitive. default, gigs replace elements sex \"M\" \"F\" NA warn . can customise  behaviour using GIGS package-level options. family single string denoting family growth standards use. Must one \"ig_fet\", \"ig_nbs\", \"ig_png\", \"who_gs\", function throw error. argument case-sensitive. acronym single string denoting specific growth standard use. allowed values acronym depend value family, listed documentation x argument. Incompatible family acronym values cause errors thrown. argument case-sensitive.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/zscore2value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert z-scores/centiles to anthropometric measures using international growth standards — zscore2value","text":"Numeric vector expected measurements length equal longest input vector.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/reference/zscore2value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert z-scores/centiles to anthropometric measures using international growth standards — zscore2value","text":"","code":"# Convert in the weight-for-age standard from the WHO Child Growth Standards zscore2value(-2:2, 0, \"M\", family = \"who_gs\", acronym = \"wfa\") #> [1] 2.459312 2.880651 3.346400 3.858619 4.419354  # Or obtain centiles... centile2value(pnorm(-2:2), 0, \"M\", family = \"who_gs\", acronym = \"wfa\") #> [1] 2.459312 2.880651 3.346400 3.858619 4.419354"},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-0419002","dir":"Changelog","previous_headings":"","what":"gigs 0.4.1.9002","title":"gigs 0.4.1.9002","text":"new version package includes many changes recommended good folks rOpenSci, reviewing package. family acronym arguments used select specific growth standard. classify_*() family functions longer take vectors input, instead take data.frame-like objects. Use classify_growth() get data multiple growth indicators time. try compute many growth outcomes (.e. size--GA, SVN, stunting, wasting, weight--age head size) possible based data provide, tell analyses performed. GIGS z-scoring functions now explicitly user-facing. Check gigs_waz() friends easy z-scoring using growth standards suggested GIGS. id parameter classify_growth() friends, well gigs z-scoring functions. parameter informs functions data point , birth measurements individual can identified assessed appropriately. compute_*() functions growth analysis. functions take several vectors containing anthropometric measurements, age, sex; return factor growth categories. equivalent classify_*() functions v0.4.1 earlier. categorise_*() functions growth analysis. functions take vectors growth centiles/z-scores input, return factor growth categories. Added INTERGROWTH-21st standard estimated fetal weight based Hadlock formula. available value2zscore() friends provided family = \"ig_fet\" acronym = \"hefwfga\". default, .gigs_options$handle_unused_levels \"keep_warn\". gigs tell unused factor levels, drop . Change \"drop_warn\" \"drop_silent\"drop unused factor levels automatically. can now set gigs input-checking options gigs_input_options_set(). Z-scoring based GIGS-recommended standards now accounts measurements different individuals, whereas earlier versions z-scoring logic treated data came individual. .gigs_options now actively exported gigs available end-users. Errors, warnings, messages GIGS now handled rlang::abort() friends, look much prettier. Updates ‘Getting Started’ vignette ‘Benchmarking’ article. non-breaking changes documentation test suite.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-041","dir":"Changelog","previous_headings":"","what":"gigs 0.4.1","title":"gigs 0.4.1","text":"Changes documentation facilitate autotest::autotest_package() pass. Minor changes vignettes new patched version.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-040","dir":"Changelog","previous_headings":"","what":"gigs 0.4.0","title":"gigs 0.4.0","text":"Changed name classify_sga() classify_sfga() Added INTERGROWTH-21st Fetal standards, including Fetal Growth standards, Fetal Doppler standards, Brain Development, ! INTERGROWTH-21st Postnatal Growth (ig_png) conversion functions now accept post-menstrual age weeks (pma_weeks) either whole weeks decimals, e.g. 37 37.142857, 37.142857 equal 37 weeks + 1 day, 37 + 1/7 weeks. Added checkmate-based verification inputs, customised warning() stop() mechanisms exported functions. See documentation allowed data types/lengths function argument. gigs package options via .gigs_options, lets customise warning error behaviour see fit. Added statistical review roclets tags. Better documentation, compliance SRR tags. Internal, non-breaking changes test suite documentation.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-031","dir":"Changelog","previous_headings":"","what":"gigs 0.3.1","title":"gigs 0.3.1","text":"Internal, non-breaking changes test suite documentation. Classification functions now use gigs_**z() functions internally z-scoring. z-scoring functions, found gigs-zscoring.R, made user-facing GIGS guidance documentation made public.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-030","dir":"Changelog","previous_headings":"","what":"gigs 0.3.0","title":"gigs 0.3.0","text":"update includes several large changes GIGS interface, including changed argument names classification conversion functions. used major release package may still change release GIGS guidance document. Replaced gest_age parameter gest_days circumstances, including ig_nbs growth curve/coefficient tables. classify_wasting() now takes gestational age/age data, uses apply INTERGROWTH-21st Postnatal Growth standard weight--length appropriate. Changed percentile centile function names documentation. Argument names left unchanged, centiles still passed functions p. Added classify_svn() function, classifies newborns categories used Lancet’s 2023 Small Vulnerable Newborn (SVN) Series. Updated coefficient retrieval functions run ~ 2 times fast version 0.2.3. Added type checking functions conversion functions, along additional unit tests make sure work. Extensive changes documentation structure. changes appear internally, roxygen documentation uses @inherit/@inheritParams tags. Added vignette displaying performance differences gigs , similar R packages, well Stata implementations.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-023","dir":"Changelog","previous_headings":"","what":"gigs 0.2.3","title":"gigs 0.2.3","text":"Updated regression equations normative body composition standards ig_nbs, namely fmfga, ffmfga, bfpfga. functions give outputs much closer published centiles, though degree error still present. Updated improved body composition vignette include new derivation process. comes removal data.table dependency - coefficient retrieval/interpolation now occurs using matrices. move using data.table.merge() subsetting operators sped code significantly. consistent subsetting operators terminology package source code.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-022","dir":"Changelog","previous_headings":"","what":"gigs 0.2.2","title":"gigs 0.2.2","text":"Optimised interpolation coefficient-based who_gs_...()/ig_nbs_...() functions. -loops rbind - instead, approx() function interpolation called vectors. Began using data.table retrieving/merging coefficient tables, new helper function named retrive_coefficients(). approach slower smaller inputs old data.frame approach, maintains much lower time number inputs increased. also concentrates coefficient-retrieval logic one group common functions. Minor changes README.md small refactors readability.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-021","dir":"Changelog","previous_headings":"","what":"gigs 0.2.1","title":"gigs 0.2.1","text":"Renamed coarse parameter classify_sga() severe better reflect function; now setting severe FALSE cause classify_sga() specify SGA cases 3rd percentile. Full use <sup> tags pkgdown website Standardised titles documentation conversion + classification functions Updated “Introduction gigs” article include available classification functions Extra docs changes can viewed diffs commit (e.g., replacing @returns Roxygen tags @return)","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-020","dir":"Changelog","previous_headings":"","what":"gigs 0.2.0","title":"gigs 0.2.0","text":"Added INTERGROWTH-21st Postnatal Growth tables + functions new weight--length standard. include ig_png_wfl_value2zscore() ig_png_wfl_percentile2value(). Refactored check_params.R standard-specific. Added comments purpose code unclear. May refactor later make self-evidently important.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-012","dir":"Changelog","previous_headings":"","what":"gigs 0.1.2","title":"gigs 0.1.2","text":"classify_sga() now uses < >, <= >= determine LGA/SGA cut-offs. aligns function ‘correct’ methodology calculating size GA.","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-011","dir":"Changelog","previous_headings":"","what":"gigs 0.1.1","title":"gigs 0.1.1","text":"Major documentation updates Added life6mo dataset Added ‘Getting Started’ vignette","code":""},{"path":"https://lshtm-gigs.github.io/gigs/news/index.html","id":"gigs-010","dir":"Changelog","previous_headings":"","what":"gigs 0.1.0","title":"gigs 0.1.0","text":"Created package Added NEWS.md file track changes package. Added conversion functions (e.g. who_gs_value2zscore()/ig_png_value2percentile()) Added classification functions (e.g. classify_sga()) Added reference datasets (e.g. ig_nbs, who_gs, who_gs_coeffs)","code":""}]
